{"version":3,"sources":["webpack:///./node_modules/angular2-jwt/angular2-jwt.js","webpack:///./node_modules/rxjs/_esm5/add/observable/defer.js","webpack:///./node_modules/rxjs/_esm5/add/observable/fromPromise.js","webpack:///./node_modules/rxjs/_esm5/add/operator/mergeMap.js","webpack:///./src/app/quonmanager/components/adviser-form/adviser-form.component.html","webpack:///./src/app/quonmanager/components/adviser-form/adviser-form.component.scss","webpack:///./src/app/quonmanager/components/adviser-form/adviser-form.component.ts","webpack:///./src/app/quonmanager/components/adviser-list/adviser-list.component.html","webpack:///./src/app/quonmanager/components/adviser-list/adviser-list.component.scss","webpack:///./src/app/quonmanager/components/adviser-list/adviser-list.component.ts","webpack:///./src/app/quonmanager/components/dashboard/dashboard.component.html","webpack:///./src/app/quonmanager/components/dashboard/dashboard.component.scss","webpack:///./src/app/quonmanager/components/dashboard/dashboard.component.ts","webpack:///./src/app/quonmanager/components/employee-details/employee-details.component.html","webpack:///./src/app/quonmanager/components/employee-details/employee-details.component.scss","webpack:///./src/app/quonmanager/components/employee-details/employee-details.component.ts","webpack:///./src/app/quonmanager/components/employee-form/employee-form.component.html","webpack:///./src/app/quonmanager/components/employee-form/employee-form.component.scss","webpack:///./src/app/quonmanager/components/employee-form/employee-form.component.ts","webpack:///./src/app/quonmanager/components/employee-list/employee-list.component.html","webpack:///./src/app/quonmanager/components/employee-list/employee-list.component.scss","webpack:///./src/app/quonmanager/components/employee-list/employee-list.component.ts","webpack:///./src/app/quonmanager/components/employee-position-details/employee-position-details.component.html","webpack:///./src/app/quonmanager/components/employee-position-details/employee-position-details.component.scss","webpack:///./src/app/quonmanager/components/employee-position-details/employee-position-details.component.ts","webpack:///./src/app/quonmanager/components/employee-station-details/employee-station-details.component.html","webpack:///./src/app/quonmanager/components/employee-station-details/employee-station-details.component.scss","webpack:///./src/app/quonmanager/components/employee-station-details/employee-station-details.component.ts","webpack:///./src/app/quonmanager/components/guidancecouncilor-form/guidancecouncilor-form.component.html","webpack:///./src/app/quonmanager/components/guidancecouncilor-form/guidancecouncilor-form.component.scss","webpack:///./src/app/quonmanager/components/guidancecouncilor-form/guidancecouncilor-form.component.ts","webpack:///./src/app/quonmanager/components/guidancecouncilor-list/guidancecouncilor-list.component.html","webpack:///./src/app/quonmanager/components/guidancecouncilor-list/guidancecouncilor-list.component.scss","webpack:///./src/app/quonmanager/components/guidancecouncilor-list/guidancecouncilor-list.component.ts","webpack:///./src/app/quonmanager/components/levelsection-form/levelsection-form.component.html","webpack:///./src/app/quonmanager/components/levelsection-form/levelsection-form.component.scss","webpack:///./src/app/quonmanager/components/levelsection-form/levelsection-form.component.ts","webpack:///./src/app/quonmanager/components/levelsection-list/levelsection-list.component.html","webpack:///./src/app/quonmanager/components/levelsection-list/levelsection-list.component.scss","webpack:///./src/app/quonmanager/components/levelsection-list/levelsection-list.component.ts","webpack:///./src/app/quonmanager/components/login-form/login-form.component.html","webpack:///./src/app/quonmanager/components/login-form/login-form.component.scss","webpack:///./src/app/quonmanager/components/login-form/login-form.component.ts","webpack:///./src/app/quonmanager/components/main-content/main-content.component.html","webpack:///./src/app/quonmanager/components/main-content/main-content.component.scss","webpack:///./src/app/quonmanager/components/main-content/main-content.component.ts","webpack:///./src/app/quonmanager/components/no-access/no-access.component.html","webpack:///./src/app/quonmanager/components/no-access/no-access.component.scss","webpack:///./src/app/quonmanager/components/no-access/no-access.component.ts","webpack:///./src/app/quonmanager/components/page-not-found/page-not-found.component.html","webpack:///./src/app/quonmanager/components/page-not-found/page-not-found.component.scss","webpack:///./src/app/quonmanager/components/page-not-found/page-not-found.component.ts","webpack:///./src/app/quonmanager/components/participant-form/participant-form.component.html","webpack:///./src/app/quonmanager/components/participant-form/participant-form.component.scss","webpack:///./src/app/quonmanager/components/participant-form/participant-form.component.ts","webpack:///./src/app/quonmanager/components/position-form/position-form.component.html","webpack:///./src/app/quonmanager/components/position-form/position-form.component.scss","webpack:///./src/app/quonmanager/components/position-form/position-form.component.ts","webpack:///./src/app/quonmanager/components/position-list/position-list.component.html","webpack:///./src/app/quonmanager/components/position-list/position-list.component.scss","webpack:///./src/app/quonmanager/components/position-list/position-list.component.ts","webpack:///./src/app/quonmanager/components/prefectofdiscipline-form/prefectofdiscipline-form.component.html","webpack:///./src/app/quonmanager/components/prefectofdiscipline-form/prefectofdiscipline-form.component.scss","webpack:///./src/app/quonmanager/components/prefectofdiscipline-form/prefectofdiscipline-form.component.ts","webpack:///./src/app/quonmanager/components/prefectofdiscipline-list/prefectofdiscipline-list.component.html","webpack:///./src/app/quonmanager/components/prefectofdiscipline-list/prefectofdiscipline-list.component.scss","webpack:///./src/app/quonmanager/components/prefectofdiscipline-list/prefectofdiscipline-list.component.ts","webpack:///./src/app/quonmanager/components/principal-form/principal-form.component.html","webpack:///./src/app/quonmanager/components/principal-form/principal-form.component.scss","webpack:///./src/app/quonmanager/components/principal-form/principal-form.component.ts","webpack:///./src/app/quonmanager/components/principal-list/principal-list.component.html","webpack:///./src/app/quonmanager/components/principal-list/principal-list.component.scss","webpack:///./src/app/quonmanager/components/principal-list/principal-list.component.ts","webpack:///./src/app/quonmanager/components/registration-form/registration-form.component.html","webpack:///./src/app/quonmanager/components/registration-form/registration-form.component.scss","webpack:///./src/app/quonmanager/components/registration-form/registration-form.component.ts","webpack:///./src/app/quonmanager/components/section-form/section-form.component.html","webpack:///./src/app/quonmanager/components/section-form/section-form.component.scss","webpack:///./src/app/quonmanager/components/section-form/section-form.component.ts","webpack:///./src/app/quonmanager/components/section-list/section-list.component.html","webpack:///./src/app/quonmanager/components/section-list/section-list.component.scss","webpack:///./src/app/quonmanager/components/section-list/section-list.component.ts","webpack:///./src/app/quonmanager/components/sidenav/sidenav.component.html","webpack:///./src/app/quonmanager/components/sidenav/sidenav.component.scss","webpack:///./src/app/quonmanager/components/sidenav/sidenav.component.ts","webpack:///./src/app/quonmanager/components/station-form/station-form.component.html","webpack:///./src/app/quonmanager/components/station-form/station-form.component.scss","webpack:///./src/app/quonmanager/components/station-form/station-form.component.ts","webpack:///./src/app/quonmanager/components/station-list/station-list.component.html","webpack:///./src/app/quonmanager/components/station-list/station-list.component.scss","webpack:///./src/app/quonmanager/components/station-list/station-list.component.ts","webpack:///./src/app/quonmanager/components/student-form/student-form.component.html","webpack:///./src/app/quonmanager/components/student-form/student-form.component.scss","webpack:///./src/app/quonmanager/components/student-form/student-form.component.ts","webpack:///./src/app/quonmanager/components/student-list/student-list.component.html","webpack:///./src/app/quonmanager/components/student-list/student-list.component.scss","webpack:///./src/app/quonmanager/components/student-list/student-list.component.ts","webpack:///./src/app/quonmanager/components/toolbar/toolbar.component.html","webpack:///./src/app/quonmanager/components/toolbar/toolbar.component.scss","webpack:///./src/app/quonmanager/components/toolbar/toolbar.component.ts","webpack:///./src/app/quonmanager/components/training-form/training-form.component.html","webpack:///./src/app/quonmanager/components/training-form/training-form.component.scss","webpack:///./src/app/quonmanager/components/training-form/training-form.component.ts","webpack:///./src/app/quonmanager/components/training-list/training-list.component.html","webpack:///./src/app/quonmanager/components/training-list/training-list.component.scss","webpack:///./src/app/quonmanager/components/training-list/training-list.component.ts","webpack:///./src/app/quonmanager/models/EmployeeQuery.ts","webpack:///./src/app/quonmanager/models/Position.ts","webpack:///./src/app/quonmanager/models/Station.ts","webpack:///./src/app/quonmanager/models/employee.ts","webpack:///./src/app/quonmanager/models/guardian.ts","webpack:///./src/app/quonmanager/models/levelsection.ts","webpack:///./src/app/quonmanager/models/participant.ts","webpack:///./src/app/quonmanager/models/participantQuery.ts","webpack:///./src/app/quonmanager/models/person.ts","webpack:///./src/app/quonmanager/models/section.ts","webpack:///./src/app/quonmanager/models/sectionAdviser.ts","webpack:///./src/app/quonmanager/models/sourceMemo.ts","webpack:///./src/app/quonmanager/models/student.ts","webpack:///./src/app/quonmanager/models/training.ts","webpack:///./src/app/quonmanager/models/trainingQuery.ts","webpack:///./src/app/quonmanager/quonmanager-app.component.ts","webpack:///./src/app/quonmanager/quonmanager.module.ts","webpack:///./src/app/quonmanager/services/adviser.service.ts","webpack:///./src/app/quonmanager/services/auth-guard.service.ts","webpack:///./src/app/quonmanager/services/auth.service.ts","webpack:///./src/app/quonmanager/services/bloodtype.service.ts","webpack:///./src/app/quonmanager/services/citizenship.service.ts","webpack:///./src/app/quonmanager/services/civilstatus.service.ts","webpack:///./src/app/quonmanager/services/gender.service.ts","webpack:///./src/app/quonmanager/services/level.service.ts","webpack:///./src/app/quonmanager/services/levelsection.service.ts","webpack:///./src/app/quonmanager/services/mothertongue.service.ts","webpack:///./src/app/quonmanager/services/participant.service.ts","webpack:///./src/app/quonmanager/services/position.service.ts","webpack:///./src/app/quonmanager/services/principal.service.ts","webpack:///./src/app/quonmanager/services/religion.service.ts","webpack:///./src/app/quonmanager/services/role.service.ts","webpack:///./src/app/quonmanager/services/section.service.ts","webpack:///./src/app/quonmanager/services/station.service.ts","webpack:///./src/app/quonmanager/services/student.service.ts","webpack:///./src/app/quonmanager/services/training.service.ts","webpack:///./src/app/quonmanager/services/user.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AACA;AACA;AACA,mBAAmB,sBAAsB;AACzC;AACA;AACA;AACA;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,oCAAoC;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,2DAA2D,EAAE;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,+CAA+C;AACnG;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gGAAgG,8CAA8C,EAAE;AAChJ;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,mCAAmC,uDAAuD;AAC1F;AACA;AACA,mCAAmC,0DAA0D;AAC7F;AACA;AACA,mCAAmC,yDAAyD;AAC5F;AACA;AACA,mCAAmC,0DAA0D;AAC7F;AACA;AACA,mCAAmC,2DAA2D;AAC9F;AACA;AACA,mCAAmC,wDAAwD;AAC3F;AACA;AACA,mCAAmC,2DAA2D;AAC9F;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0D;AACA;AACA,mC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,iDAAiD;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,uBAAuB;AAC3C;AACA;AACA;AACA;AACA;AACA,mBAAmB,sBAAsB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,oBAAoB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,wC;;;;;;;;;;;;;;ACzWA;AAAA;AACqB;AACU;AAC/B;AACA;;;;;;;;;;;;;;;ACJA;AAAA;AACqB;AACsB;AAC3C;AACA;;;;;;;;;;;;;;;ACJA;AAAA;AACqB;AACF;AACnB;AACA;AACA;;;;;;;;;;;;ACLA,qD;;;;;;;;;;;ACAA,mB;;;;;;;;;;;;;;;;;;;;;;;;ACAkD;AAO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","file":"quonmanager-quonmanager-module.js","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar http_1 = require(\"@angular/http\");\nvar core_1 = require(\"@angular/core\");\nvar Observable_1 = require(\"rxjs/Observable\");\nrequire(\"rxjs/add/observable/fromPromise\");\nrequire(\"rxjs/add/observable/defer\");\nrequire(\"rxjs/add/operator/mergeMap\");\nvar AuthConfigConsts = (function () {\n    function AuthConfigConsts() {\n    }\n    return AuthConfigConsts;\n}());\nAuthConfigConsts.DEFAULT_TOKEN_NAME = 'token';\nAuthConfigConsts.DEFAULT_HEADER_NAME = 'Authorization';\nAuthConfigConsts.HEADER_PREFIX_BEARER = 'Bearer ';\nexports.AuthConfigConsts = AuthConfigConsts;\nvar AuthConfigDefaults = {\n    headerName: AuthConfigConsts.DEFAULT_HEADER_NAME,\n    headerPrefix: null,\n    tokenName: AuthConfigConsts.DEFAULT_TOKEN_NAME,\n    tokenGetter: function () { return localStorage.getItem(AuthConfigDefaults.tokenName); },\n    noJwtError: false,\n    noClientCheck: false,\n    globalHeaders: [],\n    noTokenScheme: false\n};\n/**\n * Sets up the authentication configuration.\n */\nvar AuthConfig = (function () {\n    function AuthConfig(config) {\n        config = config || {};\n        this._config = objectAssign({}, AuthConfigDefaults, config);\n        if (this._config.headerPrefix) {\n            this._config.headerPrefix += ' ';\n        }\n        else if (this._config.noTokenScheme) {\n            this._config.headerPrefix = '';\n        }\n        else {\n            this._config.headerPrefix = AuthConfigConsts.HEADER_PREFIX_BEARER;\n        }\n        if (config.tokenName && !config.tokenGetter) {\n            this._config.tokenGetter = function () { return localStorage.getItem(config.tokenName); };\n        }\n    }\n    AuthConfig.prototype.getConfig = function () {\n        return this._config;\n    };\n    return AuthConfig;\n}());\nexports.AuthConfig = AuthConfig;\nvar AuthHttpError = (function (_super) {\n    __extends(AuthHttpError, _super);\n    function AuthHttpError() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return AuthHttpError;\n}(Error));\nexports.AuthHttpError = AuthHttpError;\n/**\n * Allows for explicit authenticated HTTP requests.\n */\nvar AuthHttp = (function () {\n    function AuthHttp(options, http, defOpts) {\n        var _this = this;\n        this.http = http;\n        this.defOpts = defOpts;\n        this.config = options.getConfig();\n        this.tokenStream = new Observable_1.Observable(function (obs) {\n            obs.next(_this.config.tokenGetter());\n        });\n    }\n    AuthHttp.prototype.mergeOptions = function (providedOpts, defaultOpts) {\n        var newOptions = defaultOpts || new http_1.RequestOptions();\n        if (this.config.globalHeaders) {\n            this.setGlobalHeaders(this.config.globalHeaders, providedOpts);\n        }\n        newOptions = newOptions.merge(new http_1.RequestOptions(providedOpts));\n        return newOptions;\n    };\n    AuthHttp.prototype.requestHelper = function (requestArgs, additionalOptions) {\n        var options = new http_1.RequestOptions(requestArgs);\n        if (additionalOptions) {\n            options = options.merge(additionalOptions);\n        }\n        return this.request(new http_1.Request(this.mergeOptions(options, this.defOpts)));\n    };\n    AuthHttp.prototype.requestWithToken = function (req, token) {\n        if (!this.config.noClientCheck && !tokenNotExpired(undefined, token)) {\n            if (!this.config.noJwtError) {\n                return new Observable_1.Observable(function (obs) {\n                    obs.error(new AuthHttpError('No JWT present or has expired'));\n                });\n            }\n        }\n        else {\n            req.headers.set(this.config.headerName, this.config.headerPrefix + token);\n        }\n        return this.http.request(req);\n    };\n    AuthHttp.prototype.setGlobalHeaders = function (headers, request) {\n        if (!request.headers) {\n            request.headers = new http_1.Headers();\n        }\n        headers.forEach(function (header) {\n            var key = Object.keys(header)[0];\n            var headerValue = header[key];\n            request.headers.set(key, headerValue);\n        });\n    };\n    AuthHttp.prototype.request = function (url, options) {\n        var _this = this;\n        if (typeof url === 'string') {\n            return this.get(url, options); // Recursion: transform url from String to Request\n        }\n        // else if ( ! url instanceof Request ) {\n        //   throw new Error('First argument must be a url string or Request instance.');\n        // }\n        // from this point url is always an instance of Request;\n        var req = url;\n        // Create a cold observable and load the token just in time\n        return Observable_1.Observable.defer(function () {\n            var token = _this.config.tokenGetter();\n            if (token instanceof Promise) {\n                return Observable_1.Observable.fromPromise(token).mergeMap(function (jwtToken) { return _this.requestWithToken(req, jwtToken); });\n            }\n            else {\n                return _this.requestWithToken(req, token);\n            }\n        });\n    };\n    AuthHttp.prototype.get = function (url, options) {\n        return this.requestHelper({ body: '', method: http_1.RequestMethod.Get, url: url }, options);\n    };\n    AuthHttp.prototype.post = function (url, body, options) {\n        return this.requestHelper({ body: body, method: http_1.RequestMethod.Post, url: url }, options);\n    };\n    AuthHttp.prototype.put = function (url, body, options) {\n        return this.requestHelper({ body: body, method: http_1.RequestMethod.Put, url: url }, options);\n    };\n    AuthHttp.prototype.delete = function (url, options) {\n        return this.requestHelper({ body: '', method: http_1.RequestMethod.Delete, url: url }, options);\n    };\n    AuthHttp.prototype.patch = function (url, body, options) {\n        return this.requestHelper({ body: body, method: http_1.RequestMethod.Patch, url: url }, options);\n    };\n    AuthHttp.prototype.head = function (url, options) {\n        return this.requestHelper({ body: '', method: http_1.RequestMethod.Head, url: url }, options);\n    };\n    AuthHttp.prototype.options = function (url, options) {\n        return this.requestHelper({ body: '', method: http_1.RequestMethod.Options, url: url }, options);\n    };\n    return AuthHttp;\n}());\nAuthHttp = __decorate([\n    core_1.Injectable(),\n    __metadata(\"design:paramtypes\", [AuthConfig, http_1.Http, http_1.RequestOptions])\n], AuthHttp);\nexports.AuthHttp = AuthHttp;\n/**\n * Helper class to decode and find JWT expiration.\n */\nvar JwtHelper = (function () {\n    function JwtHelper() {\n    }\n    JwtHelper.prototype.urlBase64Decode = function (str) {\n        var output = str.replace(/-/g, '+').replace(/_/g, '/');\n        switch (output.length % 4) {\n            case 0: {\n                break;\n            }\n            case 2: {\n                output += '==';\n                break;\n            }\n            case 3: {\n                output += '=';\n                break;\n            }\n            default: {\n                throw 'Illegal base64url string!';\n            }\n        }\n        return this.b64DecodeUnicode(output);\n    };\n    // credits for decoder goes to https://github.com/atk\n    JwtHelper.prototype.b64decode = function (str) {\n        var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n        var output = '';\n        str = String(str).replace(/=+$/, '');\n        if (str.length % 4 == 1) {\n            throw new Error(\"'atob' failed: The string to be decoded is not correctly encoded.\");\n        }\n        for (\n        // initialize result and counters\n        var bc = 0, bs = void 0, buffer = void 0, idx = 0; \n        // get next character\n        buffer = str.charAt(idx++); \n        // character found in table? initialize bit storage and add its ascii value;\n        ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer,\n            // and if not first of each 4 characters,\n            // convert the first 8 bits to one ascii character\n            bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0) {\n            // try to find character in table (0-63, not found => -1)\n            buffer = chars.indexOf(buffer);\n        }\n        return output;\n    };\n    // https://developer.mozilla.org/en/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#The_Unicode_Problem\n    JwtHelper.prototype.b64DecodeUnicode = function (str) {\n        return decodeURIComponent(Array.prototype.map.call(this.b64decode(str), function (c) {\n            return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n        }).join(''));\n    };\n    JwtHelper.prototype.decodeToken = function (token) {\n        var parts = token.split('.');\n        if (parts.length !== 3) {\n            throw new Error('JWT must have 3 parts');\n        }\n        var decoded = this.urlBase64Decode(parts[1]);\n        if (!decoded) {\n            throw new Error('Cannot decode the token');\n        }\n        return JSON.parse(decoded);\n    };\n    JwtHelper.prototype.getTokenExpirationDate = function (token) {\n        var decoded;\n        decoded = this.decodeToken(token);\n        if (!decoded.hasOwnProperty('exp')) {\n            return null;\n        }\n        var date = new Date(0); // The 0 here is the key, which sets the date to the epoch\n        date.setUTCSeconds(decoded.exp);\n        return date;\n    };\n    JwtHelper.prototype.isTokenExpired = function (token, offsetSeconds) {\n        var date = this.getTokenExpirationDate(token);\n        offsetSeconds = offsetSeconds || 0;\n        if (date == null) {\n            return false;\n        }\n        // Token expired?\n        return !(date.valueOf() > (new Date().valueOf() + (offsetSeconds * 1000)));\n    };\n    return JwtHelper;\n}());\nexports.JwtHelper = JwtHelper;\n/**\n * Checks for presence of token and that token hasn't expired.\n * For use with the @CanActivate router decorator and NgIf\n */\nfunction tokenNotExpired(tokenName, jwt) {\n    if (tokenName === void 0) { tokenName = AuthConfigConsts.DEFAULT_TOKEN_NAME; }\n    var token = jwt || localStorage.getItem(tokenName);\n    var jwtHelper = new JwtHelper();\n    return token != null && !jwtHelper.isTokenExpired(token);\n}\nexports.tokenNotExpired = tokenNotExpired;\nexports.AUTH_PROVIDERS = [\n    {\n        provide: AuthHttp,\n        deps: [http_1.Http, http_1.RequestOptions],\n        useFactory: function (http, options) {\n            return new AuthHttp(new AuthConfig(), http, options);\n        }\n    }\n];\nfunction provideAuth(config) {\n    return [\n        {\n            provide: AuthHttp,\n            deps: [http_1.Http, http_1.RequestOptions],\n            useFactory: function (http, options) {\n                return new AuthHttp(new AuthConfig(config), http, options);\n            }\n        }\n    ];\n}\nexports.provideAuth = provideAuth;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\nfunction toObject(val) {\n    if (val === null || val === undefined) {\n        throw new TypeError('Object.assign cannot be called with null or undefined');\n    }\n    return Object(val);\n}\nfunction objectAssign(target) {\n    var source = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        source[_i - 1] = arguments[_i];\n    }\n    var from;\n    var to = toObject(target);\n    var symbols;\n    for (var s = 1; s < arguments.length; s++) {\n        from = Object(arguments[s]);\n        for (var key in from) {\n            if (hasOwnProperty.call(from, key)) {\n                to[key] = from[key];\n            }\n        }\n        if (Object.getOwnPropertySymbols) {\n            symbols = Object.getOwnPropertySymbols(from);\n            for (var i = 0; i < symbols.length; i++) {\n                if (propIsEnumerable.call(from, symbols[i])) {\n                    to[symbols[i]] = from[symbols[i]];\n                }\n            }\n        }\n    }\n    return to;\n}\n/**\n * Module for angular2-jwt\n * @experimental\n */\nvar AuthModule = AuthModule_1 = (function () {\n    function AuthModule(parentModule) {\n        if (parentModule) {\n            throw new Error('AuthModule is already loaded. Import it in the AppModule only');\n        }\n    }\n    AuthModule.forRoot = function (config) {\n        return {\n            ngModule: AuthModule_1,\n            providers: [\n                { provide: AuthConfig, useValue: config }\n            ]\n        };\n    };\n    return AuthModule;\n}());\nAuthModule = AuthModule_1 = __decorate([\n    core_1.NgModule({\n        imports: [http_1.HttpModule],\n        providers: [AuthHttp, JwtHelper]\n    }),\n    __param(0, core_1.Optional()), __param(0, core_1.SkipSelf()),\n    __metadata(\"design:paramtypes\", [AuthModule])\n], AuthModule);\nexports.AuthModule = AuthModule;\nvar AuthModule_1;\n//# sourceMappingURL=angular2-jwt.js.map","/** PURE_IMPORTS_START .._.._Observable,.._.._observable_defer PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { defer as staticDefer } from '../../observable/defer';\nObservable.defer = staticDefer;\n//# sourceMappingURL=defer.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._observable_fromPromise PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { fromPromise as staticFromPromise } from '../../observable/fromPromise';\nObservable.fromPromise = staticFromPromise;\n//# sourceMappingURL=fromPromise.js.map \n","/** PURE_IMPORTS_START .._.._Observable,.._.._operator_mergeMap PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { mergeMap } from '../../operator/mergeMap';\nObservable.prototype.mergeMap = mergeMap;\nObservable.prototype.flatMap = mergeMap;\n//# sourceMappingURL=mergeMap.js.map \n","module.exports = \"<p>\\n  adviser-form works!\\n</p>\\n\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-adviser-form',\n  templateUrl: './adviser-form.component.html',\n  styleUrls: ['./adviser-form.component.scss']\n})\nexport class AdviserFormComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"<p>\\n  adviser-list works!\\n</p>\\n\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-adviser-list',\n  templateUrl: './adviser-list.component.html',\n  styleUrls: ['./adviser-list.component.scss']\n})\nexport class AdviserListComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"<h5 class=\\\"material\\\">School ID : {{ authService.decodedToken.SchoolId }}</h5>\\n<h5 class=\\\"material\\\">Employee Number : {{ authService.decodedToken.EmployeeNumber }}</h5>\\n<h5 class=\\\"material\\\">Name : {{ authService.decodedToken.given_name }}</h5>\\n<h5 class=\\\"material\\\">Position : {{ authService.decodedToken.Position }}</h5>\\n<h5 class=\\\"material\\\">Station : {{ authService.decodedToken.Station }}</h5>\"","module.exports = \".material {\\n  font-family: cursive; }\\n\\n.material h1, h2, h3, h4, h5 {\\n  font-family: cursive; }\\n\"","import { AuthService } from './../../services/auth.service';\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.scss']\n})\nexport class DashboardComponent implements OnInit {\n\n  constructor(public authService: AuthService) { }\n\n  ngOnInit() {\n    \n  }\n\n}\n","module.exports = \"<div>\\n  <mat-card class=\\\"example-card\\\">\\n    <mat-card-header>\\n      <mat-card-title>{{ employee.employeeNumber }}</mat-card-title>\\n      <mat-card-subtitle>{{ employee.person.title }} {{ employee.person.firstName }} {{ employee.person.middleName }} {{ employee.person.lastName }} {{ employee.person.suffixName }}</mat-card-subtitle>\\n    </mat-card-header>\\n\\n    <mat-card-content>\\n\\n      <mat-tab-group>\\n        <mat-tab label=\\\"Position History\\\"> <app-employee-position-details [positions]=\\\"employee.employeePositions\\\"></app-employee-position-details> </mat-tab>\\n        <mat-tab label=\\\"Station History\\\"> <app-employee-station-details [stations]=\\\"employee.employeeStations\\\"></app-employee-station-details> </mat-tab>\\n      </mat-tab-group>\\n\\n    </mat-card-content>\\n  </mat-card>\\n</div>\\n\\n<ng-template>\\n  <mat-spinner></mat-spinner>\\n</ng-template>\\n\"","module.exports = \"\"","import { EmployeeService } from './../../services/employee.service';\nimport { Component, OnInit, Input } from '@angular/core';\nimport { Employee } from '../../models/employee';\nimport { ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'app-employee-details',\n  templateUrl: './employee-details.component.html',\n  styleUrls: ['./employee-details.component.scss']\n})\nexport class EmployeeDetailsComponent implements OnInit {\n\n  employee: Employee;\n  id: string;\n\n  constructor(private route: ActivatedRoute, private employeeService: EmployeeService) {\n    this.route.params.subscribe(params => this.id = params['id']);\n  }\n\n  ngOnInit() {\n    this.loadRecord();\n  }\n\n  loadRecord() {\n    this.employeeService.getById(this.id)\n    .subscribe(response => {\n      this.employee = response.json();\n    });\n  }\n\n}\n","module.exports = \"<div *ngIf=\\\"stations else loading\\\">\\n\\n  <mat-toolbar color=\\\"primary\\\">\\n    <mat-icon style=\\\"padding-right:15em\\\">group_add</mat-icon>\\n    New Employee\\n  </mat-toolbar>\\n\\n  <br>\\n  <br>\\n\\n  <form [formGroup]=\\\"empFormGroup\\\">\\n    <mat-dialog-content>\\n      <div class=\\\"example-container\\\">\\n        <mat-form-field hintLabel=\\\"7 digits\\\">\\n          <input matInput placeholder=\\\"Employee Number\\\" formControlName=\\\"employeeNumber\\\" required maxlength=\\\"7\\\" minlength=\\\"7\\\" pattern=\\\"[0-9]+\\\">\\n          <mat-error *ngIf=\\\"empFormGroup.get('employeeNumber').invalid\\\">{{getErrorMessage('employeeNumber')}}</mat-error>\\n          <mat-hint align=\\\"end\\\">{{empFormGroup.get('employeeNumber').value?.length || 0}}/7</mat-hint>\\n        </mat-form-field>\\n\\n        <br>\\n        <mat-divider></mat-divider>\\n        <br>\\n\\n        <mat-accordion>\\n          <mat-expansion-panel [expanded]=\\\"panelOpenState\\\">\\n            <mat-expansion-panel-header>\\n              <mat-panel-title>\\n                Basic Information\\n              </mat-panel-title>\\n              <mat-panel-description>\\n                Enter Basic Information\\n              </mat-panel-description>\\n            </mat-expansion-panel-header>\\n\\n            <div class=\\\"example-container\\\" formGroupName=\\\"person\\\">\\n              <mat-form-field>\\n                <input matInput placeholder=\\\"title\\\">\\n              </mat-form-field>\\n\\n              <mat-form-field hintLabel=\\\"Minimum 3 characters\\\">\\n                <input matInput placeholder=\\\"First Name\\\" formControlName=\\\"firstName\\\" required minlength=\\\"3\\\" pattern=\\\"[a-zA-Z][a-zA-Z ]+\\\">\\n                <mat-error *ngIf=\\\"empFormGroup.get('person.firstName').invalid\\\">{{getErrorMessage('person.firstName')}}</mat-error>\\n                <mat-hint align=\\\"end\\\">{{empFormGroup.get('person.firstName').value?.length || 0}}/3</mat-hint>\\n              </mat-form-field>\\n\\n              <mat-form-field hintLabel=\\\"Minimum 3 characters\\\">\\n                <input matInput placeholder=\\\"Middle Name\\\" formControlName=\\\"middleName\\\" required minlength=\\\"3\\\" pattern=\\\"[a-zA-Z][a-zA-Z ]+\\\">\\n                <mat-error *ngIf=\\\"empFormGroup.get('person.middleName').invalid\\\">{{getErrorMessage('person.middleName')}}</mat-error>\\n                <mat-hint align=\\\"end\\\">{{empFormGroup.get('person.middleName').value?.length || 0}}/3</mat-hint>\\n              </mat-form-field>\\n\\n              <mat-form-field hintLabel=\\\"Minimum 3 characters\\\">\\n                <input matInput placeholder=\\\"Last Name\\\" formControlName=\\\"lastName\\\" required minlength=\\\"3\\\" pattern=\\\"[a-zA-Z][a-zA-Z ]+\\\">\\n                <mat-error *ngIf=\\\"empFormGroup.get('person.lastName').invalid\\\">{{getErrorMessage('person.lastName')}}</mat-error>\\n                <mat-hint align=\\\"end\\\">{{empFormGroup.get('person.lastName').value?.length || 0}}/3</mat-hint>\\n              </mat-form-field>\\n\\n              <mat-form-field>\\n                <input matInput placeholder=\\\"Suffix\\\" formControlName=\\\"suffixName\\\">\\n              </mat-form-field>\\n\\n              <mat-form-field>\\n                <input matInput [matDatepicker]=\\\"birthdate\\\" placeholder=\\\"Birth Date\\\" formControlName=\\\"birthDate\\\" required>\\n                <mat-datepicker-toggle matSuffix [for]=\\\"birthdate\\\"></mat-datepicker-toggle>\\n                <mat-datepicker #birthdate></mat-datepicker>\\n              </mat-form-field>\\n\\n              <mat-form-field hintLabel=\\\"Minimum 5 characters\\\">\\n                <input matInput placeholder=\\\"Place of Birth\\\" formControlName=\\\"placeOfBirth\\\" required minlength=\\\"5\\\" pattern=\\\"[a-zA-Z][a-zA-Z ]+\\\">\\n                <mat-error *ngIf=\\\"empFormGroup.get('person.placeOfBirth').invalid\\\">{{getErrorMessage('person.placeOfBirth')}}</mat-error>\\n                <mat-hint align=\\\"end\\\">{{empFormGroup.get('person.placeOfBirth').value?.length || 0}}/3</mat-hint>\\n              </mat-form-field>\\n\\n              <mat-form-field hintLabel=\\\"Select Gender\\\">\\n                <mat-select placeholder=\\\"Gender\\\" formControlName=\\\"genderId\\\" required>\\n                  <mat-option *ngFor=\\\"let gender of genders\\\" [value]=\\\"gender.id\\\">{{gender.name}}</mat-option>\\n                </mat-select>\\n              </mat-form-field>\\n\\n              <mat-form-field hintLabel=\\\"Select Civil Status\\\">\\n                <mat-select placeholder=\\\"Civil Status\\\" formControlName=\\\"civilStatusId\\\" required>\\n                  <mat-option *ngFor=\\\"let civilstatus of civilStatuses\\\" [value]=\\\"civilstatus.id\\\">{{civilstatus.name}}</mat-option>\\n                </mat-select>\\n              </mat-form-field>\\n\\n              <mat-form-field hintLabel=\\\"Select CitizenShip\\\">\\n                <mat-select placeholder=\\\"CitizenShip\\\" formControlName=\\\"citizenShipId\\\" required>\\n                  <mat-option *ngFor=\\\"let citizenShip of citizenShips\\\" [value]=\\\"citizenShip.id\\\">{{citizenShip.name}}</mat-option>\\n                </mat-select>\\n              </mat-form-field>\\n\\n              <mat-form-field hintLabel=\\\"Select Mother Tongue\\\">\\n                <mat-select placeholder=\\\"Mother Tongue\\\" formControlName=\\\"motherTongueId\\\" required>\\n                  <mat-option *ngFor=\\\"let motherTongues of motherTongues\\\" [value]=\\\"motherTongues.id\\\">{{motherTongues.name}}</mat-option>\\n                </mat-select>\\n              </mat-form-field>\\n\\n              \\n              <mat-form-field hintLabel=\\\"digits\\\">\\n                <input matInput placeholder=\\\"Height in centimeter\\\" formControlName=\\\"height\\\" maxlength=\\\"3\\\" minlength=\\\"2\\\" pattern=\\\"[0-9]+\\\">\\n                <mat-error *ngIf=\\\"empFormGroup.get('person.height').invalid\\\">{{getErrorMessage('person.height')}}</mat-error>\\n                <mat-hint align=\\\"end\\\">{{empFormGroup.get('person.height').value?.length || 0}}/3</mat-hint>\\n              </mat-form-field>\\n\\n              <mat-form-field hintLabel=\\\"digits\\\">\\n                <input matInput placeholder=\\\"Weight in Kilogram\\\" formControlName=\\\"weight\\\" maxlength=\\\"3\\\" minlength=\\\"2\\\" pattern=\\\"[0-9]+\\\">\\n                <mat-error *ngIf=\\\"empFormGroup.get('person.weight').invalid\\\">{{getErrorMessage('person.weight')}}</mat-error>\\n                <mat-hint align=\\\"end\\\">{{empFormGroup.get('person.weight').value?.length || 0}}/3</mat-hint>\\n              </mat-form-field>\\n\\n              <mat-form-field hintLabel=\\\"Select Blood Type\\\">\\n                <mat-select placeholder=\\\"Blood Type\\\" formControlName=\\\"bloodTypeId\\\" required>\\n                  <mat-option *ngFor=\\\"let bloodType of bloodTypes\\\" [value]=\\\"bloodType.id\\\">{{bloodType.name}}</mat-option>\\n                </mat-select>\\n              </mat-form-field>\\n\\n              <mat-form-field hintLabel=\\\"Select Religion\\\">\\n                <mat-select placeholder=\\\"Religion\\\" formControlName=\\\"religionId\\\" required>\\n                  <mat-option *ngFor=\\\"let religion of religions\\\" [value]=\\\"religion.id\\\">{{religion.name}}</mat-option>\\n                </mat-select>\\n              </mat-form-field>\\n\\n            \\n            </div>\\n\\n          </mat-expansion-panel>\\n\\n        </mat-accordion>\\n      </div>\\n\\n      <br>\\n      <mat-divider></mat-divider>\\n      <br>\\n\\n      <mat-accordion>\\n        <mat-expansion-panel [expanded]=\\\"panelOpenState\\\">\\n          <mat-expansion-panel-header>\\n            <mat-panel-title>\\n              Employee Position\\n            </mat-panel-title>\\n            <mat-panel-description>\\n              Enter Position\\n            </mat-panel-description>\\n          </mat-expansion-panel-header>\\n          <br> \\n          <button mat-raised-button color=\\\"primary\\\" color=\\\"primary\\\" [disabled]=\\\"!employeePositions.valid\\\" (click)=\\\"addPosition()\\\">New Position</button>\\n          <br><br>\\n          <div class=\\\"example-container\\\" formArrayName=\\\"employeePositions\\\"\\n            *ngFor=\\\"let position of empFormGroup.get('employeePositions').controls; let i=index;\\\">\\n            \\n            <div class=\\\"example-container\\\" [formGroupName]=\\\"i\\\">\\n              <mat-form-field hintLabel=\\\"Select Position\\\">\\n                <mat-select placeholder=\\\"Position\\\" formControlName=\\\"positionId\\\" required>\\n                  <mat-option *ngFor=\\\"let position of positions\\\" [value]=\\\"position.id\\\">{{position.name}}</mat-option>\\n                </mat-select>\\n              </mat-form-field>\\n\\n              <mat-form-field>\\n                <input matInput [matDatepicker]=\\\"positionstartdate\\\" placeholder=\\\"Start Date\\\" formControlName=\\\"startDate\\\" required>\\n                <mat-datepicker-toggle matSuffix [for]=\\\"positionstartdate\\\"></mat-datepicker-toggle>\\n                <mat-datepicker #positionstartdate></mat-datepicker>\\n              </mat-form-field>\\n\\n              <mat-form-field>\\n                <input matInput [matDatepicker]=\\\"positionenddate\\\" placeholder=\\\"End Date\\\" formControlName=\\\"endDate\\\" required>\\n                <mat-datepicker-toggle matSuffix [for]=\\\"positionenddate\\\" ></mat-datepicker-toggle>\\n                <mat-datepicker #positionenddate></mat-datepicker>\\n              </mat-form-field>\\n              <br>\\n              <mat-divider></mat-divider>\\n              <a mat-button [disabled]=\\\"!employeePositions.valid\\\" (click)=\\\"deletePosition(i)\\\"> <mat-icon color=\\\"warn\\\">delete </mat-icon>Delete Position</a>\\n              <mat-divider></mat-divider>\\n              <br>\\n            </div>\\n          </div>\\n\\n        </mat-expansion-panel>\\n\\n      </mat-accordion>\\n\\n      <br>\\n      <mat-divider></mat-divider>\\n      <br>\\n\\n      <mat-accordion>\\n        <mat-expansion-panel [expanded]=\\\"panelOpenState\\\">\\n          <mat-expansion-panel-header>\\n            <mat-panel-title>\\n              Employee Station\\n            </mat-panel-title>\\n            <mat-panel-description>\\n              Enter Station\\n            </mat-panel-description>\\n          </mat-expansion-panel-header>\\n          <br> \\n          <button mat-raised-button color=\\\"primary\\\" color=\\\"primary\\\" [disabled]=\\\"!employeeStations.valid\\\" (click)=\\\"addStation()\\\">New Station</button>\\n          <br><br>\\n          <div class=\\\"example-container\\\" formArrayName=\\\"employeeStations\\\" \\n            *ngFor=\\\"let station of empFormGroup.get('employeeStations').controls; let i = index;\\\">\\n            <div class=\\\"example-container\\\" [formGroupName]=\\\"i\\\">\\n                \\n              <mat-form-field hintLabel=\\\"Select Station\\\">\\n                <mat-select placeholder=\\\"Station\\\" formControlName=\\\"stationId\\\" required>\\n                  <mat-option *ngFor=\\\"let station of stations\\\" [value]=\\\"station.id\\\">{{station.name}}</mat-option>\\n                </mat-select>\\n              </mat-form-field>\\n\\n              <mat-form-field>\\n                <input matInput [matDatepicker]=\\\"Stationstartdate\\\" placeholder=\\\"Start Date\\\" formControlName=\\\"startDate\\\" required>\\n                <mat-datepicker-toggle matSuffix [for]=\\\"Stationstartdate\\\"></mat-datepicker-toggle>\\n                <mat-datepicker #Stationstartdate></mat-datepicker>\\n              </mat-form-field>\\n\\n              <mat-form-field>\\n                <input matInput [matDatepicker]=\\\"Stationenddate\\\" placeholder=\\\"End Date\\\" formControlName=\\\"endDate\\\" required>\\n                <mat-datepicker-toggle matSuffix [for]=\\\"Stationenddate\\\"></mat-datepicker-toggle>\\n                <mat-datepicker #Stationenddate></mat-datepicker>\\n              </mat-form-field>\\n              <br>\\n              <mat-divider></mat-divider>\\n              <a mat-button [disabled]=\\\"!employeeStations.valid\\\" (click)=\\\"deleteStation()\\\"> <mat-icon color=\\\"warn\\\">delete </mat-icon>Delete Station </a>\\n              <mat-divider></mat-divider>\\n              <br>\\n            </div>\\n          </div>\\n        \\n        </mat-expansion-panel>\\n\\n      </mat-accordion>\\n\\n      <br>\\n      <mat-divider></mat-divider>\\n      <br>\\n\\n    </mat-dialog-content>\\n  </form>\\n\\n  <mat-dialog-actions>\\n    <button mat-raised-button color=\\\"primary\\\" color=\\\"primary\\\" [disabled]=\\\"!empFormGroup.valid\\\" (click)=\\\"create()\\\">\\n      <mat-icon>save</mat-icon> Save\\n    </button>\\n    <button mat-raised-button color=\\\"primary\\\" (click)=\\\"redirectToList()\\\">\\n      <mat-icon>cancel</mat-icon> Cancel\\n    </button>\\n  </mat-dialog-actions>\\n</div>\\n\\n<ng-template #loading>\\n  <mat-spinner style=\\\"margin:0 auto;\\\" mode=\\\"indeterminate\\\"></mat-spinner>\\n</ng-template>\"","module.exports = \".example-container {\\n  display: flex;\\n  flex-direction: column; }\\n\\n.example-container > * {\\n  width: 100%; }\\n\"","import { ReligionService } from './../../services/religion.service';\nimport { GenderService } from './../../services/gender.service';\nimport { BloodType } from './../../models/bloodType';\nimport { MotherTongue } from './../../models/motherTongue';\nimport { CivilStatus } from './../../models/civilStatus';\nimport { CitizenShip } from './../../models/citizenShip';\nimport { BloodTypeService } from './../../services/bloodtype.service';\nimport { MotherTongueService } from './../../services/mothertongue.service';\nimport { CitizenShipService } from './../../services/citizenship.service';\nimport { CivilStatusService } from './../../services/civilstatus.service';\nimport { BadRequestError } from './../../../common/bad-request-error';\nimport { AppError } from '../../../common/app-error';\n\nimport { PositionDTO } from './../../models/positionDTO';\nimport { StationDTO } from '../../models/stationDTO';\n\nimport { EmployeeService } from './../../services/employee.service';\nimport { PositionService } from './../../services/position.service';\nimport { StationService } from './../../services/station.service';\n\nimport { Component, OnInit } from '@angular/core';\n\nimport { FormControl, FormGroup, Validators, FormBuilder, FormArray } from '@angular/forms';\nimport { MatSnackBar } from '@angular/material';\nimport { NoConnectionError } from '../../../common/no-connection-error';\nimport { Employee } from '../../models/employee';\nimport { Person } from '../../models/person';\nimport { Router, ActivatedRoute } from '@angular/router';\n\nimport { Gender } from '../../models/Gender';\nimport { Religion } from '../../models/religion';\n\n\n@Component({\n  selector: 'app-employee-form',\n  templateUrl: './employee-form.component.html',\n  styleUrls: ['./employee-form.component.scss']\n})\n\nexport class EmployeeFormComponent implements OnInit {\n  id: string;\n  employee: Employee;\n  positions: PositionDTO[];\n  stations: StationDTO[];\n  genders: Gender[];\n  civilStatuses: CivilStatus[];\n  citizenShips: CitizenShip[];\n  motherTongues: MotherTongue[];\n  bloodTypes: BloodType[];\n  religions: Religion[];\n\n  empFormGroup: FormGroup;\n  panelOpenState = true;\n\n  get employeeStations(): FormArray { \n    return <FormArray>this.empFormGroup.get('employeeStations');\n  }\n\n  get employeePositions(): FormArray { \n    return <FormArray>this.empFormGroup.get('employeePositions');\n  }\n\n  constructor(private fb: FormBuilder,\n    private positionService: PositionService,\n    private stationService: StationService,\n    private genderService: GenderService,\n    private civilStatusService: CivilStatusService,\n    private citizenShipService: CitizenShipService,\n    private motherTongueService: MotherTongueService,\n    private bloodTypeService: BloodTypeService,\n    private religionService: ReligionService,\n    private employeeService: EmployeeService,\n    public snackBar: MatSnackBar,\n    private router: Router,\n    private route: ActivatedRoute) {\n    this.route.params.subscribe(params => this.id = params['id']);\n  }\n\n  ngOnInit() {\n\n    this.createEmployeeFormGroup();\n\n    this.populatePositions();\n\n    this.populateStations();\n\n    this.populateGenders();\n\n    this.populateCitizenShips();\n\n    this.populateCivilStatuses();\n\n    this.populateMotherBloodTypes();\n\n    this.populateMotherTongues();\n\n    this.populateReligions();\n\n    if (this.id != null) {\n      this.employeeService.getById(this.id)\n        .subscribe(response => {\n          this.employee = response.json();\n          this.populateForm();\n        }, (error: AppError) => {\n          if (error instanceof NoConnectionError) {\n            this.snackBar.open('Loading Failed', 'No Connection', {\n              duration: 2000,\n            });\n          }\n        });\n    } \n\n  }\n\n  createEmployeeFormGroup(): void {\n    this.employee = new Employee();\n    this.employee.person = new Person();\n\n    this.empFormGroup = this.fb.group({\n      id: new FormControl(this.employee.id),\n      employeeNumber: new FormControl(this.employee.employeeNumber, [Validators.required, Validators.maxLength(7), Validators.minLength(7)]),\n      personId: new FormControl(this.employee.personId),\n      person: this.fb.group({\n        id: new FormControl(this.employee.person.id),\n        title: new FormControl(this.employee.person.title),\n        firstName: new FormControl(this.employee.person.firstName, [Validators.required, Validators.minLength(3)]),\n        middleName: new FormControl(this.employee.person.middleName, [Validators.required, Validators.minLength(3)]),\n        lastName: new FormControl(this.employee.person.lastName, [Validators.required, Validators.minLength(3)]),\n        suffixName: new FormControl(this.employee.person.suffixName),\n        birthDate: new FormControl(this.employee.person.birthDate, [Validators.required]),\n        placeOfBirth: new FormControl(this.employee.person.placeOfBirth, [Validators.required]),\n        genderId: new FormControl(this.employee.person.genderId, [Validators.required]),\n        civilStatusId: new FormControl(this.employee.person.civilStatusId, [Validators.required]),\n        citizenShipId: new FormControl(this.employee.person.citizenShipId, [Validators.required]),\n        motherTongueId: new FormControl(this.employee.person.motherTongueId, [Validators.required]),\n        bloodTypeId: new FormControl(this.employee.person.bloodTypeId, [Validators.required]),\n        religionId: new FormControl(this.employee.person.religionId, [Validators.required]),\n        height: new FormControl(this.employee.person.height, [Validators.required]),\n        weight: new FormControl(this.employee.person.weight, [Validators.required]),\n        personAddresses: this.fb.array([this.createPersonAddress()])\n\n      }),\n      employeeStations: this.fb.array([this.createStation()]),\n      employeePositions: this.fb.array([this.createPosition()])\n    });\n  }\n  // create and initialize a position {FormGroup}\n  createPosition(): FormGroup {\n    return this.fb.group({\n      id: 0,\n      employeeId: new FormControl(this.employee.id),\n      positionId: new FormControl('', [Validators.required]),\n      startDate:  new FormControl('', [Validators.required]),\n      endDate:  new FormControl('', [Validators.required])\n    });\n  }\n  // create and initialize a station {FormGroup}\n  createStation(): FormGroup {\n    return this.fb.group({\n      id: 0,\n      employeeId: new FormControl(this.employee.id),\n      stationId: new FormControl('', [Validators.required]),\n      startDate: new FormControl('', [Validators.required]),\n      endDate:  new FormControl('', [Validators.required])\n    });\n  }\n  // create and initialize a personAddress {FormGroup}\n  createPersonAddress(): FormGroup {\n    return this.fb.group({\n      id: 0,\n      \n    });\n\n  }\n  // push the created formGroup to {employeeStations} FormArray\n  addStation(): void {\n    this.employeeStations.push(this.createStation());\n  }\n  // push the created formGroup to {employeePositions} FormArray\n  addPosition(): void {\n    this.employeePositions.push(this.createPosition());\n  }\n  // pop the create formGroup\n  deleteStation(index: number): void {\n    this.employeeStations.removeAt(index);\n  }\n    // pop the create formGroup\n  deletePosition(index: number): void {\n    this.employeePositions.removeAt(index);\n  }\n    \n  populatePositions(): void {\n    this.positionService.getAll()\n      .subscribe(response => {\n        this.positions = response.json().positions;\n      },\n        (error: AppError) => {\n          if (error instanceof NoConnectionError) {\n            this.snackBar.open('Loading Failed', 'No Connection', {\n              duration: 2000,\n            });\n          }\n        });\n  }\n\n  populateStations(): void {\n    this.stationService.getAll()\n      .subscribe(response => {\n        this.stations = response.json().stations;\n      }, (error: AppError) => {\n        if (error instanceof NoConnectionError) {\n          this.snackBar.open('Loading Failed', 'No Connection', {\n            duration: 2000,\n          });\n        }\n      });\n  }\n  populateGenders(): void {\n    this.genderService.getAll()\n    .subscribe(response => {\n      this.genders = response.json().genders;\n    }, (error: AppError) => {\n      if (error instanceof NoConnectionError) {\n        this.snackBar.open('Loading Failed', 'No Connection', {\n          duration: 2000,\n        });\n      }\n    });    \n  }\n\n  populateCivilStatuses(): void {\n    this.civilStatusService.getAll()\n      .subscribe(response => {\n        this.civilStatuses = response.json().civilStatuses;\n      }, (error: AppError) => {\n        if (error instanceof NoConnectionError) {\n          this.snackBar.open('Loading Failed', 'No Connection', {\n            duration: 2000,\n          });\n        }\n      });   \n  }\n  populateCitizenShips(): void {\n    this.citizenShipService.getAll()\n      .subscribe(response => {\n        this.citizenShips = response.json().citizenShips;\n      }, (error: AppError) => {\n        if (error instanceof NoConnectionError) {\n          this.snackBar.open('Loading Failed', 'No Connection', {\n            duration: 2000,\n          });\n        }\n      });   \n  }\n  populateMotherTongues(): void {\n    this.motherTongueService.getAll()\n      .subscribe(response => {\n        this.motherTongues = response.json().motherTongues;\n      }, (error: AppError) => {\n        if (error instanceof NoConnectionError) {\n          this.snackBar.open('Loading Failed', 'No Connection', {\n            duration: 2000,\n          });\n        }\n      });   \n  }\n  populateMotherBloodTypes(): void {\n    this.bloodTypeService.getAll()\n      .subscribe(response => {\n        this.bloodTypes = response.json().bloodTypes;\n      }, (error: AppError) => {\n        if (error instanceof NoConnectionError) {\n          this.snackBar.open('Loading Failed', 'No Connection', {\n            duration: 2000,\n          });\n        }\n      });   \n  }\n  populateReligions(): void {\n    this.religionService.getAll()\n    .subscribe(response => {\n      this.religions = response.json().religions;\n    }, (error: AppError) => {\n      if (error instanceof NoConnectionError) {\n        this.snackBar.open('Loading Failed', 'No Connection', {\n          duration: 2000,\n        });\n      }\n    });   \n  }\n  // populate form when the id param has value\n  populateForm(): void {\n    this.empFormGroup.patchValue({\n      id: this.employee.id,\n      employeeNumber: this.employee.employeeNumber,\n      personId: this.employee.personId,\n      person: this.employee.person,\n    });\n    // remove first the one that is initialize when building the formGroup\n    this.employeePositions.removeAt(0);\n    // loop through values of the employeePositions\n    // push the value of [employee.EmployeePositions] to {employeePositions} FormArray\n    this.employee.employeePositions.forEach(element => {\n      const empPosition = this.createPosition();\n      empPosition.patchValue(element);\n      this.employeePositions.push(empPosition);\n    });\n      // remove first the one that is initialize when building the formGroup\n    this.employeeStations.removeAt(0);\n    // loop through values of the employeeStations\n    // push the value of [employee.EmployeeStations] to {employeeStations} FormArray\n    this.employee.employeeStations.forEach(element => {\n      const empStation = this.createStation();\n      empStation.patchValue(element);\n      this.employeeStations.push(empStation);\n    });\n  }\n  \n  // creating and updating form values\n  create() {\n    // convert all date inputs | bug in matDatePicker\n    this.convertDateInputs();\n    // check the employee.id if has value if it is for creating or updating    \n    if (this.employee.id == null) { \n      // disable ids that are unneccessary \n      this.disableIdsinForm();\n      this.employeeService.create(this.empFormGroup.value)\n      .subscribe(response => {\n        this.snackBar.open('Successful!', 'Employee Created', {\n          duration: 2000,\n        });\n        this.redirectToList();\n      },\n        (error: AppError) => {\n          if (error instanceof BadRequestError) {\n            this.empFormGroup.setErrors(['BadRequest']);\n            this.snackBar.open('Bad Request!', 'Employee not Created', {\n              duration: 2000,\n            });\n          } else {\n            this.snackBar.open('Unknown Error!', 'Employee not Created', {\n              duration: 2000,\n            });\n          }\n        }\n      );\n    }\n    // tslint:disable-next-line:one-line\n    else {\n      this.employeeService.update(this.empFormGroup.value)\n      .subscribe(response => {\n        this.snackBar.open('Successful!', 'Employee Updated', {\n          duration: 2000,\n        });\n        this.redirectToList();\n      },\n        (error: AppError) => {\n          if (error instanceof BadRequestError) {\n            this.empFormGroup.setErrors(['BadRequest']);\n            this.snackBar.open('Bad Request!', 'Employee not Updated', {\n              duration: 2000,\n            });\n          } else {\n            this.snackBar.open('Unknown Error!', 'Employee not Updated', {\n              duration: 2000,\n            });\n          }\n        }\n      );    \n    }\n  \n  }\n  // matDatapicker bug solution\n  convertDateInputs(): void {\n    for (let index = 0; index < this.employeePositions.length; index++) {\n      const startDate = new Date(this.employeePositions.at(index).get('startDate').value);\n      const endDate = new Date(this.employeePositions.at(index).get('endDate').value);\n      // startDate\n      const convertedStartDate = this.convertDate(startDate);\n      this.employeePositions.at(index).get('startDate').setValue(convertedStartDate);\n      // endDate\n      const convertedEndDate = this.convertDate(endDate);\n      this.employeePositions.at(index).get('endDate').setValue(convertedEndDate);\n    }\n\n    for (let index = 0; index < this.employeeStations.length; index++) {\n      const startDate = new Date(this.employeeStations.at(index).get('startDate').value);\n      const endDate = new Date(this.employeeStations.at(index).get('endDate').value);\n      // startDate\n      const convertedStartDate = this.convertDate(startDate);\n      this.employeeStations.at(index).get('startDate').setValue(convertedStartDate);\n      // endDate\n      const convertedEndDate = this.convertDate(endDate);\n      this.employeeStations.at(index).get('endDate').setValue(convertedEndDate);\n    }\n  }\n  // convert date to current date\n  convertDate(dateToConvert: Date): Date {\n    const convertedDate = dateToConvert.setMinutes((dateToConvert.getTimezoneOffset() * -1));\n    return new Date(convertedDate);\n  }\n  // disable ids in form for creating\n  disableIdsinForm(): void {\n    this.empFormGroup.get('id').disable();\n    this.empFormGroup.get('personId').disable();\n    this.empFormGroup.get('person.id').disable();\n    // loop and disable the ids in employeePositions\n    for (let index = 0; index < this.employeePositions.length; index++) {\n          this.employeePositions.at(index).get('id').disable();\n          this.employeePositions.at(index).get('employeeId').disable();\n    }\n    // loop and disable the ids in employeeStations\n    for (let index = 0; index < this.employeeStations.length; index++) {\n      this.employeeStations.at(index).get('id').disable();\n      this.employeeStations.at(index).get('employeeId').disable();\n    }\n  }\n  // back to employee-list\n  redirectToList(): void {\n    this.router.navigate(['/quonmanager/employee-list']);\n  }\n  // form error\n  getErrorMessage(controlName: string): string {\n    if (controlName === 'employeeNumber') {\n      return this.empFormGroup.get(controlName).hasError('minlength') ? 'You must enter 7 digits' :\n        this.empFormGroup.get(controlName).hasError('pattern') ? 'You must enter digits only' : '';\n    }\n    // tslint:disable-next-line:one-line\n    else {\n      return this.empFormGroup.get(controlName).hasError('required') ? 'You must enter a value' :\n        this.empFormGroup.get(controlName).hasError('minlength') ? 'You must enter atleast 3 characters' :\n          this.empFormGroup.get(controlName).hasError('pattern') ? 'You must enter alphabet characters only' :\n            '';\n    }\n  }\n}\n\n\n","module.exports = \"<div class=\\\"material\\\">\\n  <mat-card>\\n    <div *ngIf=\\\"employees else loading\\\">\\n      <button mat-raised-button color=\\\"primary\\\" [routerLink]=\\\"['/quonmanager/employee-form']\\\" class=\\\"material\\\">\\n        Add Employee\\n      </button>\\n\\n      <br>\\n      <br>\\n      <mat-divider></mat-divider>\\n      <mat-accordion>\\n        <mat-expansion-panel  class=\\\"example-container\\\" #matExpansionPanel>\\n          <mat-expansion-panel-header>\\n            <mat-panel-title>\\n            </mat-panel-title>\\n            <mat-panel-description style=\\\"font-family: cursive\\\">\\n                Search Options\\n              </mat-panel-description>\\n          </mat-expansion-panel-header>\\n          <div class=\\\"example-container material\\\">\\n            <mat-form-field hintLabel=\\\"7 digits\\\" style=\\\"font-family: cursive\\\">\\n              <input matInput placeholder=\\\"Employee Number\\\" [(ngModel)]=\\\"employeeQuery.employeeNumber\\\" style=\\\"font-family: cursive\\\">\\n            </mat-form-field>\\n            <mat-form-field hintLabel=\\\"Title\\\">\\n              <input matInput placeholder=\\\"Title\\\" [(ngModel)]=\\\"employeeQuery.title\\\">\\n            </mat-form-field>\\n            <mat-form-field hintLabel=\\\"Minimum 3 characters\\\">\\n              <input matInput placeholder=\\\"First Name\\\" [(ngModel)]=\\\"employeeQuery.firstName\\\">\\n            </mat-form-field>\\n            <mat-form-field hintLabel=\\\"Minimum 3 characters\\\">\\n              <input matInput placeholder=\\\"Middle Name\\\" [(ngModel)]=\\\"employeeQuery.middleName\\\">\\n            </mat-form-field>\\n            <mat-form-field hintLabel=\\\"Minimum 3 characters\\\">\\n              <input matInput placeholder=\\\"Last Name\\\" [(ngModel)]=\\\"employeeQuery.lastName\\\">\\n            </mat-form-field>\\n            <mat-form-field hintLabel=\\\"Minimum 3 characters\\\">\\n              <input matInput placeholder=\\\"Suffix Name\\\" [(ngModel)]=\\\"employeeQuery.suffixName\\\">\\n            </mat-form-field>\\n          </div>\\n          <br>\\n          <mat-action-row>\\n            <button mat-raised-button color=\\\"primary\\\" (click)=\\\"search(matExpansionPanel, paginator)\\\">Search</button>\\n            <button mat-raised-button color=\\\"primary\\\" (click)=\\\"reset(matExpansionPanel, paginator)\\\">Reset</button>\\n        </mat-action-row>\\n        </mat-expansion-panel>\\n      </mat-accordion>\\n      <br>\\n      <mat-divider></mat-divider>\\n      <div class=\\\"material\\\">\\n        <mat-table #table [dataSource]=\\\"dataSource\\\">\\n          <!-- Name Column -->\\n          <ng-container matColumnDef=\\\"EmployeeNumber\\\">\\n            <mat-header-cell *matHeaderCellDef>ID </mat-header-cell>\\n            <mat-cell *matCellDef=\\\"let employee\\\">\\n              <a matLine [routerLink]=\\\"['/quonmanager/employee-details', employee.id]\\\">{{ employee.employeeNumber }} </a>\\n            </mat-cell>\\n          </ng-container>\\n\\n          <ng-container matColumnDef=\\\"Name\\\">\\n            <mat-header-cell *matHeaderCellDef class=\\\"material\\\">Name</mat-header-cell>\\n            <mat-cell *matCellDef=\\\"let employee\\\" class=\\\"material\\\"> {{ employee.person.firstName }} {{ employee.person.middleName }} {{ employee.person.lastName }}</mat-cell>\\n          </ng-container>\\n\\n          <ng-container matColumnDef=\\\"Edit\\\">\\n            <mat-header-cell *matHeaderCellDef class=\\\"material\\\"> Edit </mat-header-cell>\\n            <mat-cell *matCellDef=\\\"let employee\\\">\\n                <a mat-button [routerLink]=\\\"['/quonmanager/employee-form', employee.id]\\\"><mat-icon color=\\\"primary\\\">edit</mat-icon> </a> \\n            </mat-cell>\\n          </ng-container>\\n  \\n          <ng-container matColumnDef=\\\"Delete\\\">\\n            <mat-header-cell *matHeaderCellDef class=\\\"material\\\"> Delete </mat-header-cell>\\n            <mat-cell *matCellDef=\\\"let employee\\\"> \\n              <a mat-button (click)=\\\"DeleteEmployee(employee.id)\\\"> <mat-icon color=\\\"warn\\\">delete </mat-icon> </a>\\n            </mat-cell>\\n          </ng-container>\\n\\n          <mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\" class=\\\"material\\\"></mat-header-row>\\n          <mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\" class=\\\"material\\\"></mat-row>\\n\\n        </mat-table>\\n\\n        <mat-paginator #paginator [length]=\\\"employeeQuery.length\\\" [pageSize]=\\\"employeeQuery.pageSize\\\" [pageSizeOptions]=\\\"pageSizeOptions\\\" [pageIndex]=\\\"pageIndex\\\" (page)=\\\"pageEvent = $event; onPaginateChange($event)\\\"\\n          class=\\\"material\\\">\\n        </mat-paginator>\\n\\n      </div>\\n\\n    </div>\\n\\n    <ng-template #loading>\\n      <mat-progress-spinner style=\\\"margin:0 auto;\\\" [mode]=\\\"behavior\\\"></mat-progress-spinner>\\n    </ng-template>\\n  </mat-card>\\n</div>\\n\"","module.exports = \".example-container {\\n  display: flex;\\n  flex-direction: column;\\n  max-height: 500px;\\n  min-width: 300px; }\\n\\n.mat-table {\\n  overflow: auto;\\n  max-height: 500px; }\\n\\n.mat-column-EmployeeNumber {\\n  flex: 0 0 20%; }\\n\\n.mat-column-Name {\\n  flex: 0 0 30%; }\\n\\n.mat-column-Delete {\\n  flex: 0 0 25%; }\\n\\n.mat-column-Edit {\\n  flex: 0 0 25%; }\\n\\n.material {\\n  font-family: cursive; }\\n\\n.material mat-paginator {\\n  font-style: italic; }\\n\\n.material mat-header-cell {\\n  font-weight: bold;\\n  font-size: medium;\\n  color: #3F51B5; }\\n\"","import { MatTableDataSource, PageEvent, MatDialog, MatSnackBar, MatExpansionPanel, MatPaginator } from '@angular/material';\nimport { Component, OnInit } from '@angular/core';\n\nimport { Employee } from './../../models/employee';\n\nimport { EmployeeService } from '../../services/employee.service';\nimport { AppError } from '../../../common/app-error';\nimport { NoConnectionError } from '../../../common/no-connection-error';\nimport { EmployeeQuery } from '../../models/EmployeeQuery';\n\n\n@Component({\n  selector: 'app-main-content',\n  templateUrl: './employee-list.component.html',\n  styleUrls: ['./employee-list.component.scss']\n})\nexport class EmployeeListComponent implements OnInit {\n  // filtering\n  employeeQuery: EmployeeQuery = new EmployeeQuery();\n  // model\n  employee: Employee;\n  employees: Employee[];\n  // mat-datatable\n  displayedColumns = ['EmployeeNumber', 'Name', 'Edit', 'Delete'];\n  dataSource: MatTableDataSource<Employee>;\n  pageSizeOptions = [5, 10, 25, 50, 100];\n  pageEvent: PageEvent;\n\n  pageIndex = 0;\n  pageSize = 10;\n  // mat-spinner\n  behavior = 'indeterminate';\n\n  constructor(private employeeService: EmployeeService,\n    private dialog: MatDialog,\n    private snackBar: MatSnackBar) { }\n  \n  ngOnInit() {\n    this.employeeQuery.pageIndex = this.pageIndex + 1;\n    this.employeeQuery.pageSize = this.pageSize;\n    this.loadRecords(this.employeeQuery);\n  }\n\n  loadRecords(employeeQuery): void {\n    this.employeeService.all(employeeQuery)\n      .subscribe(response => {\n        this.employees = response.json().employees;\n        this.dataSource = new MatTableDataSource<Employee>(this.employees);\n        this.employeeQuery.length = response.json().count;\n      },\n        (error: AppError) => {\n          if (error instanceof NoConnectionError) {\n            this.snackBar.open('Loading Failed', 'No Connection', {\n              duration: 2000,\n            }\n            );\n            this.behavior = 'determinate';\n          }\n        });\n  }\n\n  onPaginateChange($event) {\n    this.pageSize = this.pageEvent.pageSize;\n    this.pageIndex = this.pageEvent.pageIndex;\n    this.ngOnInit();\n  }\n\n  search(matExpansionPanel: MatExpansionPanel, paginator: MatPaginator): void {\n    this.onFilterChange(matExpansionPanel, paginator);\n  }\n  \n  reset(matExpansionPanel: MatExpansionPanel, paginator: MatPaginator): void {\n    this.employeeQuery = new EmployeeQuery();\n    this.onFilterChange(matExpansionPanel, paginator);\n  }\n\n  onFilterChange(matExpansionPanel: MatExpansionPanel, paginator: MatPaginator): void {\n    matExpansionPanel.close();\n    this.employeeQuery.pageIndex = 1;\n    this.employeeQuery.pageSize = this.pageSize;\n    this.loadRecords(this.employeeQuery);\n    paginator.pageIndex = 0;\n  }\n\n  DeleteEmployee(id): void { \n    this.employeeService.delete(id)\n      .subscribe(response => {\n        this.snackBar.open('Employee Deleted', 'Successful', {\n          duration: 2000, });\n          this.ngOnInit();\n      }, \n      (error: AppError) => {\n        if (error instanceof NoConnectionError) {\n          this.snackBar.open('Employee not Deleted', 'Failed', {\n            duration: 2000,\n          }\n          );\n        }\n      });\n  }\n  \n}\n","module.exports = \"<ul>\\n  <li *ngFor=\\\"let position of positions\\\">\\n    Position : {{ position.name }}\\n    <br> \\n    Appointment Date: {{ position.startDate | date }}\\n  </li>\\n</ul>\"","module.exports = \"\"","import { Component, OnInit, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-employee-position-details',\n  templateUrl: './employee-position-details.component.html',\n  styleUrls: ['./employee-position-details.component.scss']\n})\nexport class EmployeePositionDetailsComponent implements OnInit {\n  @Input() positions: Position[];\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"<ul>\\n  <li *ngFor=\\\"let station of stations\\\">\\n    Station : {{ station.name }}\\n    <br>\\n    Effective Date : {{ station.startDate }}\\n  </li>\\n</ul>\"","module.exports = \"\"","import { Component, OnInit, Input } from '@angular/core';\nimport { Station } from '../../models/Station';\n\n@Component({\n  selector: 'app-employee-station-details',\n  templateUrl: './employee-station-details.component.html',\n  styleUrls: ['./employee-station-details.component.scss']\n})\nexport class EmployeeStationDetailsComponent implements OnInit {\n  @Input() stations: Station[];\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"<p>\\n  guidancecouncilor-form works!\\n</p>\\n\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-guidancecouncilor-form',\n  templateUrl: './guidancecouncilor-form.component.html',\n  styleUrls: ['./guidancecouncilor-form.component.scss']\n})\nexport class GuidancecouncilorFormComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"<p>\\n  guidancecouncilor-list works!\\n</p>\\n\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-guidancecouncilor-list',\n  templateUrl: './guidancecouncilor-list.component.html',\n  styleUrls: ['./guidancecouncilor-list.component.scss']\n})\nexport class GuidancecouncilorListComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"<div *ngIf=\\\"advisers else loading\\\">\\n  <mat-toolbar color=\\\"primary\\\">\\n    <mat-icon style=\\\"padding-right:4em\\\">clear_all</mat-icon>New Section Assignment\\n  </mat-toolbar>\\n\\n  <br>\\n  <br>\\n\\n  <form [formGroup]=\\\"levelSectionFormGroup\\\">\\n    <mat-dialog-content>\\n      <div class=\\\"example-container\\\">\\n        <!-- School Year-->\\n        <mat-form-field hintLabel=\\\"Select School Year\\\">\\n          <mat-select placeholder=\\\"School Year\\\" formControlName=\\\"schoolYear\\\" required>\\n            <mat-option *ngFor=\\\"let schoolyear of schoolYears\\\" [value]=\\\"schoolyear\\\">{{ schoolyear }}</mat-option>\\n          </mat-select>\\n        </mat-form-field>\\n        <!-- Level -->\\n        <mat-form-field hintLabel=\\\"Select Level\\\">\\n          <mat-select placeholder=\\\"Level\\\" formControlName=\\\"levelId\\\" required>\\n            <mat-option *ngFor=\\\"let level of levels\\\" [value]=\\\"level.id\\\">{{ level.name }}</mat-option>\\n          </mat-select>\\n        </mat-form-field>\\n        <!-- Section -->\\n        <mat-form-field hintLabel=\\\"Select Section\\\">\\n          <mat-select placeholder=\\\"Section\\\" formControlName=\\\"sectionId\\\" required>\\n            <mat-option *ngFor=\\\"let section of sections\\\" [value]=\\\"section.id\\\">{{ section.name }}</mat-option>\\n          </mat-select>\\n        </mat-form-field>\\n        <!-- AdviserId -->\\n        <div class=\\\"example-container\\\" formGroupName=\\\"sectionAdviser\\\">\\n          <mat-form-field hintLabel=\\\"Select Adviser\\\">\\n            <mat-select placeholder=\\\"Adviser\\\" formControlName=\\\"adviserId\\\" required>\\n              <mat-option *ngFor=\\\"let adviser of advisers\\\" [value]=\\\"adviser.id\\\">{{ adviser.employee.person.firstName }} {{ adviser.employee.person.lastName }}</mat-option>\\n            </mat-select>\\n          </mat-form-field>\\n        </div>\\n      </div>\\n    </mat-dialog-content>\\n    <br>\\n    <br>\\n    <mat-divider></mat-divider>\\n    <br>\\n  \\n    <mat-dialog-actions>\\n      <button mat-raised-button color=\\\"primary\\\" color=\\\"primary\\\" [disabled]=\\\"!levelSectionFormGroup.valid\\\" (click)=\\\"create()\\\">\\n        <mat-icon>save</mat-icon> Save\\n      </button>\\n      <button mat-raised-button color=\\\"primary\\\" (click)=\\\"close()\\\">\\n        <mat-icon>cancel</mat-icon> Cancel\\n      </button>      \\n    </mat-dialog-actions>\\n  </form>\\n</div>\\n\\n<ng-template #loading>\\n  <mat-spinner style=\\\"margin:0 auto;\\\" mode=\\\"indeterminate\\\"></mat-spinner>\\n</ng-template>\\n\\n<p>{{ levelSectionFormGroup.value | json }}</p>\"","module.exports = \".example-container {\\n  display: flex;\\n  flex-direction: column; }\\n\\n.example-container > * {\\n  width: 100%; }\\n\"","import { AuthService } from './../../services/auth.service';\nimport { SectionService } from './../../services/section.service';\nimport { LevelSectionService } from './../../services/levelsection.service';\nimport { LevelSection } from './../../models/levelsection';\nimport { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { MatDialogRef, MatSnackBar } from '@angular/material';\nimport { SectionAdviser } from '../../models/sectionAdviser';\nimport { AppError } from '../../../common/app-error';\nimport { BadRequestError } from '../../../common/bad-request-error';\nimport { Level } from '../../models/level';\nimport { LevelService } from '../../services/level.service';\nimport { NoConnectionError } from '../../../common/no-connection-error';\nimport { Section } from '../../models/section';\nimport { AdviserService } from '../../services/adviser.service';\nimport { Adviser } from '../../models/adviser';\n\n@Component({\n  selector: 'app-levelsection-form',\n  templateUrl: './levelsection-form.component.html',\n  styleUrls: ['./levelsection-form.component.scss']\n})\nexport class LevelsectionFormComponent implements OnInit {\n  \n  levelSectionFormGroup: FormGroup;\n  levelSection: LevelSection;\n  levels: Level[];\n  sections: Section[];\n  advisers: Adviser[];\n  // [select] - school - year \n  schoolYears = [ 2018, 2019, 2020 ];\n\n  constructor(private dialogRef: MatDialogRef<LevelsectionFormComponent>,\n    private fb: FormBuilder,\n    private authService: AuthService,\n    private levelSectionService: LevelSectionService,\n    private levelService: LevelService,\n    private sectionService: SectionService,\n    private adviserService: AdviserService,\n    private snackBar: MatSnackBar) { }\n\n  ngOnInit() {\n    this.levelSectionFormGroup = this.fb.group({\n      id: new FormControl(this.levelSection.id),\n      schoolYear: new FormControl(this.levelSection.schoolYear, [Validators.required]),\n      levelId: new FormControl(this.levelSection.levelId, [Validators.required]),\n      sectionId: new FormControl(this.levelSection.sectionId, [Validators.required]),\n      stationId: new FormControl(this.authService.decodedToken.StationId),\n      sectionAdviser: this.fb.group({\n        adviserId: new FormControl(this.levelSection.sectionAdviser.adviserId, [Validators.required])\n      })\n    });\n    // getAll Levels\n    this.levelService.getAll()\n      .subscribe(response => {\n        this.levels = response.json().levels;\n      },\n      (error: AppError) => {\n        if (error instanceof NoConnectionError) {\n          this.snackBar.open('Loading Failed' , 'No Connection', {\n            duration: 2000,\n          });\n          this.dialogRef.close();\n        }});\n    // getAll Sections\n    this.sectionService.getAll()\n      .subscribe(response => {\n        this.sections = response.json().sections;\n      },\n      (error: AppError) => {\n        if (error instanceof NoConnectionError) {\n          this.snackBar.open('Loading Failed' , 'No Connection', {\n            duration: 2000,\n          });\n          this.dialogRef.close();\n        }});\n      // getAll Advisers\n      this.adviserService.getAll()\n        .subscribe(response => {\n          this.advisers = response.json().advisers;\n          console.log(response.json().advisers);\n        },\n      (error: AppError) => {\n        if (error instanceof NoConnectionError) {\n          this.snackBar.open('Loading Failed' , 'No Connection', {\n            duration: 2000,\n          });\n          this.dialogRef.close();\n        }});\n    \n  }\n  \n  create() { \n    if (this.levelSection.id == null) {\n      this.levelSectionFormGroup.get('id').disable();\n    this.levelSectionService.create(this.levelSectionFormGroup.value)\n      .subscribe(response => {\n        console.log(response);\n        this.snackBar.open('Successful!', 'Level Section Created', {\n          duration: 2000,\n        });\n        this.close();\n      },\n      (error: AppError) => {\n        if (error instanceof BadRequestError) {\n          this.levelSectionFormGroup.setErrors(['BadRequest']);\n          this.snackBar.open('Bad Request!', 'Level Section not created', {\n            duration: 2000,\n          });\n          this.close();\n        } else {\n          this.snackBar.open('Unknown Error!', 'Level Section not created', {\n          duration: 2000,\n        }); }\n      }\n    );\n  } else {\n    this.levelSectionService.update(this.levelSectionFormGroup.value)\n    .subscribe(response => {\n      this.snackBar.open('Successful!', 'Level Section Updated', {\n        duration: 2000,\n      });\n      this.close();\n    },\n      (error: AppError) => {\n        if (error instanceof BadRequestError) {\n          this.levelSectionFormGroup.setErrors(['BadRequest']);\n          this.snackBar.open('Bad Request!', 'Level Section not updated', {\n            duration: 2000,\n          });\n          this.close();\n        } else {\n          this.snackBar.open('Unknown Error!', 'Level Section not updated', {\n            duration: 2000,\n          });\n        }\n      }\n    );\n  }\n  }\n\n  close() {\n    this.dialogRef.close();\n  }\n\n  getErrorMessage(controlName: string) {\n\n    return this.levelSectionFormGroup.get(controlName).hasError('required') ? 'You must enter a value' :\n    this.levelSectionFormGroup.get(controlName).hasError('minlength') ? 'You must enter atleast 3 characters' :\n    this.levelSectionFormGroup.get(controlName).hasError('pattern') ? 'You must enter alphabet characters only' :\n    '' ;\n  }  \n\n}\n","module.exports = \"<div class=\\\"material\\\">\\n  <mat-card>\\n    <div *ngIf=\\\"levelSections else loading\\\">\\n      <button class=\\\"material\\\" mat-raised-button color=\\\"primary\\\" (click)=\\\"AddLevelSectionFormDialog()\\\">\\n        Add Level Section\\n      </button>\\n\\n      <br>\\n      <br>\\n      <mat-divider></mat-divider>\\n      <div class=\\\"example-container mat-elevation-z8\\\" class=\\\"material\\\">\\n\\n        <mat-table #table [dataSource]=\\\"dataSource\\\">\\n\\n          <ng-container matColumnDef=\\\"SchoolYear\\\">\\n            <mat-header-cell *matHeaderCellDef class=\\\"material\\\">\\n              <h3 class=\\\"matheader\\\">School Year</h3>\\n            </mat-header-cell>\\n            <mat-cell *matCellDef=\\\"let levelSection\\\"> {{ levelSection.schoolYear }}</mat-cell>\\n          </ng-container>\\n\\n          <ng-container matColumnDef=\\\"Section\\\">\\n            <mat-header-cell *matHeaderCellDef class=\\\"material\\\">\\n              <h3 class=\\\"matheader\\\">Level-Section</h3>\\n            </mat-header-cell>\\n            <mat-cell *matCellDef=\\\"let levelSection\\\"> {{ levelSection.level.name }} - {{ levelSection.section.name }}</mat-cell>\\n          </ng-container>\\n\\n          <ng-container matColumnDef=\\\"Adviser\\\">\\n            <mat-header-cell *matHeaderCellDef class=\\\"material\\\">\\n              <h3 class=\\\"matheader\\\">Adviser</h3>\\n            </mat-header-cell>\\n            <mat-cell *matCellDef=\\\"let levelSection\\\"> {{ levelSection.sectionAdviser.adviser.employee.person.firstName }} {{ levelSection.sectionAdviser.adviser.employee.person.lastName\\n              }}</mat-cell>\\n          </ng-container>\\n\\n          <ng-container matColumnDef=\\\"Edit\\\">\\n            <mat-header-cell *matHeaderCellDef class=\\\"material\\\">\\n              <h3 class=\\\"matheader\\\">Edit</h3>\\n            </mat-header-cell>\\n            <mat-cell *matCellDef=\\\"let section\\\">\\n              <a mat-button (click)=\\\"EditLevelSectionFormDialog(section)\\\">\\n                <mat-icon color=\\\"primary\\\">edit</mat-icon>\\n              </a>\\n            </mat-cell>\\n          </ng-container>\\n\\n          <ng-container matColumnDef=\\\"Delete\\\">\\n            <mat-header-cell *matHeaderCellDef class=\\\"material\\\">\\n              <h3 class=\\\"matheader\\\">Delete</h3>\\n            </mat-header-cell>\\n            <mat-cell *matCellDef=\\\"let section\\\">\\n              <a mat-button (click)=\\\"EditLevelSectionFormDialog(section)\\\">\\n                <mat-icon color=\\\"warn\\\">delete </mat-icon>\\n              </a>\\n            </mat-cell>\\n          </ng-container>\\n\\n          <mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\" class=\\\"material\\\"></mat-header-row>\\n          <mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\" class=\\\"material\\\"></mat-row>\\n\\n        </mat-table>\\n\\n        <mat-paginator [length]=\\\"length\\\" [pageSize]=\\\"pageSize\\\" [pageSizeOptions]=\\\"pageSizeOptions\\\" [pageIndex]=\\\"pageIndex\\\" (page)=\\\"pageEvent = $event; onPaginateChange($event)\\\">\\n        </mat-paginator>\\n\\n      </div>\\n    </div>\\n\\n\\n    <ng-template #loading>\\n      <mat-progress-spinner style=\\\"margin:0 auto;\\\" [mode]=\\\"behavior\\\">\\n      </mat-progress-spinner>\\n    </ng-template>\\n\\n  </mat-card>\\n</div>\\n\"","module.exports = \".example-container {\\n  display: flex;\\n  flex-direction: column;\\n  max-height: 500px;\\n  min-width: 300px; }\\n\\n.mat-table {\\n  overflow: auto;\\n  max-height: 500px; }\\n\\n.material {\\n  font-family: cursive; }\\n\\n.material mat-paginator {\\n  font-style: italic; }\\n\\n.material mat-header-cell {\\n  font-weight: bold;\\n  font-size: medium;\\n  color: #3F51B5; }\\n\"","import { LevelSection } from './../../models/levelsection';\nimport { LevelsectionFormComponent } from './../levelsection-form/levelsection-form.component';\nimport { LevelSectionService } from './../../services/levelsection.service';\nimport { Component, OnInit } from '@angular/core';\nimport { MatTableDataSource, PageEvent, MatDialog, MatSnackBar } from '@angular/material';\nimport { AppError } from '../../../common/app-error';\nimport { NoConnectionError } from '../../../common/no-connection-error';\nimport { SectionAdviser } from '../../models/sectionAdviser';\n\n@Component({\n  selector: 'app-levelsection-list',\n  templateUrl: './levelsection-list.component.html',\n  styleUrls: ['./levelsection-list.component.scss']\n})\nexport class LevelsectionListComponent implements OnInit {\n  // model\n  levelSection: LevelSection;\n  levelSections: LevelSection[];\n  // mat-table\n  displayedColumns = ['SchoolYear', 'Section', 'Adviser', 'Edit', 'Delete'];\n  dataSource: MatTableDataSource<LevelSection>;\n  pageSize = 10;\n  pageSizeOptions = [5, 10, 25, 50, 100];\n  length: number;\n  pageEvent: PageEvent;\n  // loading\n  behavior = 'indeterminate'; \n  constructor(private levelSectionService: LevelSectionService,\n    private dialog: MatDialog,\n    private snackBar: MatSnackBar) { }\n\n  ngOnInit() {\n    this.loadRecords(1, this.pageSize);\n  }\n\n  onPaginateChange($event) {\n    this.loadRecords(this.pageEvent.pageIndex + 1, this.pageEvent.pageSize);\n  }\n  \n  loadRecords(pageIndex, pageSize) {\n    this.levelSectionService.get(pageIndex, pageSize)\n      .subscribe(response => {\n        this.levelSections = response.json().levelSections;\n        this.length = response.json().count;\n        this.dataSource = new MatTableDataSource<LevelSection>(this.levelSections);\n      },\n      (error: AppError) => {\n        if (error instanceof NoConnectionError) {\n          this.snackBar.open('Loading Failed' , 'No Connection', {\n            duration: 2000,\n          }\n        );\n        this.behavior = 'determinate';\n        }        \n      }\n    );\n  }\n\n  AddLevelSectionFormDialog() { \n    const dialogRef = this.dialog.open(LevelsectionFormComponent, {\n      width: '450px'\n    });\n\n    dialogRef.componentInstance.levelSection  = new LevelSection();\n    dialogRef.componentInstance.levelSection.sectionAdviser = new SectionAdviser();\n\n    dialogRef.afterClosed().subscribe(result => { this.ngOnInit(); });\n  }\n\n  EditLevelSectionFormDialog(levelSectionPassed) {\n    const dialogRef = this.dialog.open(LevelsectionFormComponent, {\n      width: '450px'\n    });\n\n    dialogRef.componentInstance.levelSection  = new LevelSection();\n    dialogRef.componentInstance.levelSection.sectionAdviser = new SectionAdviser();\n\n    dialogRef.componentInstance.levelSection.id = levelSectionPassed.id;\n    dialogRef.componentInstance.levelSection.levelId = levelSectionPassed.levelId;\n    dialogRef.componentInstance.levelSection.schoolYear = levelSectionPassed.schoolYear;\n    dialogRef.componentInstance.levelSection.sectionId = levelSectionPassed.sectionId;\n    dialogRef.componentInstance.levelSection.stationId = levelSectionPassed.stationId;\n    dialogRef.componentInstance.levelSection.sectionAdviser.adviserId = levelSectionPassed.sectionAdviser.adviserId;\n\n    dialogRef.afterClosed().subscribe(result => { this.ngOnInit(); });\n  }\n\n}\n","module.exports = \"<div>\\n\\n  <mat-toolbar color=\\\"primary\\\">\\n    <mat-icon style=\\\"padding-right:4em\\\">portrait</mat-icon>Login Account\\n  </mat-toolbar>\\n  <br>\\n  <mat-divider></mat-divider>\\n  <br>\\n\\n  <form [formGroup]=\\\"loginFormGroup\\\">\\n    <mat-dialog-content>\\n      <div class=\\\"example-container\\\">\\n        <!-- EmployeeNumber -->\\n        <mat-form-field hintLabel=\\\"7 digits\\\">\\n          <input matInput placeholder=\\\"Employee Number\\\" formControlName=\\\"employeeNumber\\\" required maxlength=\\\"7\\\" minlength=\\\"7\\\" pattern=\\\"[0-9]+\\\">\\n          <mat-error *ngIf=\\\"loginFormGroup.get('employeeNumber').invalid\\\">{{getErrorMessage('employeeNumber')}}</mat-error>\\n          <mat-hint align=\\\"end\\\">{{loginFormGroup.get('employeeNumber').value?.length || 0}}/6</mat-hint>\\n        </mat-form-field>\\n\\n        <br>\\n        <mat-divider></mat-divider>\\n        <br>\\n\\n        <!-- Password -->\\n        <mat-form-field hintLabel=\\\"10 characters\\\">\\n          <input matInput placeholder=\\\"Enter your password\\\" [type]=\\\"hide ? 'password' : 'text'\\\" formControlName=\\\"password\\\" required\\n            maxlength=\\\"10\\\" minlength=\\\"10\\\">\\n          <mat-icon matSuffix (click)=\\\"hide = !hide\\\">{{hide ? 'visibility' : 'visibility_off'}}</mat-icon>\\n          <mat-error *ngIf=\\\"loginFormGroup.get('password').invalid\\\">{{getErrorMessage('password')}}</mat-error>\\n          <mat-hint align=\\\"end\\\">{{loginFormGroup.get('password').value?.length || 0}}/10</mat-hint>\\n        </mat-form-field>\\n\\n        <br>\\n        <mat-divider></mat-divider>\\n        <br>\\n      \\n      </div>\\n    </mat-dialog-content>\\n\\n    <mat-dialog-actions>\\n        <button mat-button color=\\\"primary\\\" [disabled]=\\\"!loginFormGroup.valid\\\" (click)=\\\"login()\\\">\\n          <mat-icon>save</mat-icon> Login\\n        </button>\\n        <button mat-button color=\\\"primary\\\" (click)=\\\"close()\\\">\\n          <mat-icon>cancel</mat-icon> Cancel\\n        </button>\\n      </mat-dialog-actions>\\n  </form>\\n</div>\\n\"","module.exports = \".example-container {\\n  display: flex;\\n  flex-direction: column; }\\n\\n.example-container > * {\\n  width: 100%; }\\n\"","import { AuthService } from './../../services/auth.service';\nimport { AppError } from './../../../common/app-error';\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { Role } from './../../models/role';\nimport { Component, OnInit } from '@angular/core';\nimport { MatDialogRef, MatSnackBar } from '@angular/material';\nimport { UnauthorizedError } from '../../../common/unauthorized-error';\nimport { NoConnectionError } from '../../../common/no-connection-error';\nimport { Router, ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'app-login-form',\n  templateUrl: './login-form.component.html',\n  styleUrls: ['./login-form.component.scss']\n})\n\nexport class LoginFormComponent implements OnInit {\n  loginCredentials: Login;\n  loginFormGroup: FormGroup;\n  // for password input\n  hide = true;\n  behavior = 'indeterminate';\n  constructor(private dialogRef: MatDialogRef<LoginFormComponent>,\n    private authService: AuthService,\n    private fb: FormBuilder,\n    private snackBar: MatSnackBar,\n    private router: Router,\n    private route: ActivatedRoute) { }\n\n  ngOnInit() {\n    this.loginFormGroup = this.fb.group({\n      employeeNumber: new FormControl('', [Validators.required, Validators.maxLength(7), Validators.minLength(7)]),\n      password: new FormControl('', [Validators.required, Validators.maxLength(10), Validators.minLength(10)])\n    });\n  }\n\n login() {\n  this.loginCredentials = this.loginFormGroup.value;\n  this.authService.login(this.loginCredentials)\n    .subscribe(response => {\n      this.snackBar.open('Access Granted', '', { duration: 5000 });\n      const returnUrl = this.route.snapshot.queryParamMap.get('returnUrl');\n      this.router.navigate([returnUrl || '/quonmanager/dashboard']);\n      this.close();\n    },\n    (error: AppError) => {\n      if (error instanceof UnauthorizedError) {\n        this.loginFormGroup.setErrors(['unauthorized']);\n        this.snackBar.open('Login Failed' , 'Employee Number and Password are invalid', {\n          duration: 2000,\n        });\n      }\n      if (error instanceof NoConnectionError) {\n        this.snackBar.open('Loading Failed' , 'No Connection', {\n          duration: 2000,\n        }\n      );\n      this.behavior = 'determinate';\n      }\n    });\n }\n\n close() {\n  this.dialogRef.close(null);\n }\n\n  getErrorMessage(controlName: string) {\n    if (controlName === 'employeeNumber') {\n      return this.loginFormGroup.get(controlName).hasError('minlength') ? 'You must enter 6 digits' :\n      this.loginFormGroup.get(controlName).hasError('pattern') ? 'You must enter digits only' : '' ;\n    }\n    // tslint:disable-next-line:one-line\n    else {\n    return this.loginFormGroup.get(controlName).hasError('required') ? 'You must enter a value' :\n    this.loginFormGroup.get(controlName).hasError('minlength') ? 'You must enter 10 password characters' :\n    this.loginFormGroup.get(controlName).hasError('pattern') ? 'You must enter alphabet characters only' :\n    '' ;\n    }\n  }\n}\nexport class Login {\n  employeeNumber: string;\n  password: string;\n}\n","module.exports = \"\"","module.exports = \".example-container {\\n  display: flex;\\n  flex-direction: column;\\n  max-height: 500px;\\n  min-width: 300px; }\\n\\n.mat-table {\\n  overflow: auto;\\n  max-height: 500px; }\\n\"","\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-main-content',\n  templateUrl: './main-content.component.html',\n  styleUrls: ['./main-content.component.scss']\n})\nexport class MainContentComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n\n\n\n\n}\n","module.exports = \"<h1>\\n  Please Login to continue.\\n</h1>\\n\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-no-access',\n  templateUrl: './no-access.component.html',\n  styleUrls: ['./no-access.component.scss']\n})\nexport class NoAccessComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"PAGE NOT FOUND\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-page-not-found',\n  templateUrl: './page-not-found.component.html',\n  styleUrls: ['./page-not-found.component.scss']\n})\nexport class PageNotFoundComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"<mat-card>\\n<div class=\\\"wrapperHeading\\\">\\n    <p>\\n        {{ training.title }}\\n    </p>\\n    <p>\\n        {{ training.sourceMemo.name}} Memo : {{ training.number }} - {{ training.year }}\\n    </p>\\n    <p>\\n        {{ training.sourceMemo.relativeExpenses}}\\n    </p>\\n</div>\\n<div class=\\\"wrapperContent\\\">\\n\\n    <div>\\n\\n        <form [formGroup]=\\\"participantFormGroup\\\">\\n\\n            <mat-card class=\\\"wrapperForm\\\">\\n                <mat-form-field hintLabel=\\\"Select Venue\\\">\\n                    <mat-select placeholder=\\\"Venue\\\" formControlName=\\\"trainingVenueId\\\">\\n                        <mat-option  *ngFor=\\\"let venue of training.trainingVenues\\\" [value]=\\\"id\\\" [disabled]=\\\"false\\\">{{ venue.venue }}</mat-option>\\n                    </mat-select>\\n                </mat-form-field>\\n                <button mat-button color=primary (click)=\\\"showParticipants()\\\">Show</button>\\n                \\n                <mat-form-field hintLabel=\\\"7 digits\\\">\\n                    <input matInput placeholder=\\\"Employee Number\\\" formControlName=\\\"employeeNumber\\\" required maxlength=\\\"7\\\" minlength=\\\"7\\\" pattern=\\\"[0-9]+\\\">\\n                </mat-form-field>\\n                <br>\\n                <button mat-raised-button color=\\\"primary\\\" (click)=\\\"create()\\\">Add Employee</button>\\n            \\n            </mat-card>\\n        </form>\\n\\n    </div>\\n\\n    <div>\\n        <mat-card *ngFor=\\\"let participant of participants\\\">\\n            {{ participant.employee.person.firstName }} {{ participant.employee.person.middleName }} {{ participant.employee.person.lastName }}  \\n        </mat-card>\\n    </div>\\n</div>\\n</mat-card>\\n\\n<p>{{ participantFormGroup.value | json }} </p>\"","module.exports = \".wrapperHeading {\\n  display: -ms-grid;\\n  display: grid;\\n  -ms-grid-columns: 1fr;\\n      grid-template-columns: 1fr;\\n  grid-auto-rows: auto; }\\n\\n.wrapperHeading > p {\\n  -ms-grid-column-align: center;\\n      justify-self: center; }\\n\\n.wrapperContent {\\n  display: -ms-grid;\\n  display: grid;\\n  -ms-grid-columns: 2.5fr 2fr;\\n      grid-template-columns: 2.5fr 2fr;\\n  grid-gap: 1em;\\n  grid-auto-rows: minmax(500px, auto); }\\n\\n.wrapperForm {\\n  display: -ms-grid;\\n  display: grid;\\n  -ms-grid-columns: 1fr .5fr;\\n      grid-template-columns: 1fr .5fr;\\n  grid-auto-rows: auto;\\n  grid-gap: 1em; }\\n\"","import { EmployeeService } from './../../services/employee.service';\nimport { BadRequestError } from './../../../common/bad-request-error';\nimport { ParticipantQuery } from './../../models/participantQuery';\nimport { ParticipantService } from './../../services/participant.service';\nimport { Participant } from './../../models/participant';\nimport { Training } from './../../models/training';\nimport { NoConnectionError } from './../../../common/no-connection-error';\nimport { AppError } from './../../../common/app-error';\nimport { TrainingService } from './../../services/training.service';\nimport { FormBuilder, FormGroup, FormControl } from '@angular/forms';\nimport { MatSnackBar } from '@angular/material';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { Component, OnInit } from '@angular/core';\nimport { SourceMemo } from '../../models/sourceMemo';\n\n\n@Component({\n  selector: 'app-participant-form',\n  templateUrl: './participant-form.component.html',\n  styleUrls: ['./participant-form.component.scss']\n})\nexport class ParticipantFormComponent implements OnInit {\n  id: string;\n  participant: Participant;\n  participants: Participant[];\n  training: Training;\n  participantFormGroup: FormGroup;\n  employeeId: number;\n\n  constructor(private fb: FormBuilder,\n    private router: Router,\n    private route: ActivatedRoute,\n    private snackBar: MatSnackBar,\n    private trainingService: TrainingService,\n    private participantService: ParticipantService,\n    private employeeService: EmployeeService) { \n      this.route.params.subscribe(params => this.id = params['id']);\n    }\n\n  ngOnInit() {\n    this.populateTraining();\n    this.createParticipantFormGroup();\n  }\n\n  populateTraining(): void { \n    this.trainingService.getById(this.id)\n    .subscribe(response => {\n      this.training = response.json();\n    }, (error: AppError) => {\n      if (error instanceof NoConnectionError) {\n        this.snackBar.open('Loading Failed', 'No Connection', {\n          duration: 2000,\n        });\n      }\n    }); \n  }\n\n  createParticipantFormGroup(): void {\n    this.training = new Training();\n    this.training.sourceMemo = new SourceMemo();\n    this.participant = new Participant();     \n\n    this.participantFormGroup = this.fb.group({\n      id: new FormControl(this.participant.id),\n      trainingVenueId: new FormControl(this.participant.trainingVenueId),\n      employeeId: new FormControl(this.participant.employeeId),\n      employeeNumber: new FormControl('')\n\n    });\n  }\n\n  showParticipants(): void {\n    const participantQuery = new ParticipantQuery();\n    participantQuery.trainingVenueId = this.participantFormGroup.get('trainingVenueId').value;\n\n    this.participantService.all(participantQuery)\n    .subscribe(response => {\n      this.participants = response.json().participants;\n      console.log(this.participants);\n\n    }, (error: AppError) => {\n      if (error instanceof NoConnectionError) {\n        this.snackBar.open('Loading Failed', 'No Connection', {\n          duration: 2000,\n        });\n      }\n    });  \n\n\n\n  }\n\n  create() {\n      const employeeNumber = this.participantFormGroup.get('employeeNumber').value;\n      this.employeeService.getByUrl(this.employeeService.getByEmployeeNumber)\n      .subscribe(response => {\n        this.employeeId = response.json().id;\n      });\n\n      this.participantFormGroup.get('employeeNumber').disable();\n      this.participantFormGroup.patchValue({\n        employeeId: this.employeeId\n      });\n\n      this.participantService.create(this.participantFormGroup.value)\n      .subscribe(response => {\n        this.snackBar.open('Successful!', 'Participant Created', {\n          duration: 2000,\n        });\n        \n      },\n        (error: AppError) => {\n          if (error instanceof BadRequestError) {\n            this.participantFormGroup.setErrors(['BadRequest']);\n            this.snackBar.open('Bad Request!', 'Participant not Created', {\n              duration: 2000,\n            });\n          } else {\n            this.snackBar.open('Unknown Error!', 'Participant not Created', {\n              duration: 2000,\n            });\n          }\n        }\n      );\n    }\n\n\n\n}\n","module.exports = \"\\r\\n  <mat-toolbar color=\\\"primary\\\">\\r\\n    <mat-icon style=\\\"padding-right:4em\\\">clear_all</mat-icon> {{ heading }}\\r\\n  </mat-toolbar>\\r\\n\\r\\n<br>\\r\\n<br>\\r\\n\\r\\n<form [formGroup]=\\\"positionFormGroup\\\">\\r\\n  <mat-dialog-content>\\r\\n    <div class=\\\"example-container\\\">\\r\\n      <!-- Section Name-->\\r\\n      <mat-form-field hintLabel=\\\"atleast 10 characters\\\">\\r\\n        <input matInput placeholder=\\\"Section\\\" formControlName=\\\"name\\\" required maxlength=\\\"100\\\" minlength=\\\"10\\\" pattern=\\\"[a-zA-Z][a-zA-Z ]+\\\">\\r\\n        <mat-error *ngIf=\\\"positionFormGroup.get('name').invalid\\\">{{getErrorMessage('name')}}</mat-error>\\r\\n        <mat-hint align=\\\"end\\\">{{positionFormGroup.get('name').value?.length || 0}}/10</mat-hint>\\r\\n      </mat-form-field>\\r\\n    \\r\\n    </div>\\r\\n  </mat-dialog-content>\\r\\n\\r\\n  <br>\\r\\n  <mat-divider></mat-divider>\\r\\n  <br>\\r\\n\\r\\n  <mat-dialog-actions>\\r\\n    <button mat-raised-button color=\\\"primary\\\" color=\\\"primary\\\" [disabled]=\\\"!positionFormGroup.valid\\\" (click)=\\\"create()\\\">\\r\\n      <mat-icon>save</mat-icon> Save\\r\\n    </button>\\r\\n    <button mat-raised-button color=\\\"primary\\\" (click)=\\\"close()\\\">\\r\\n      <mat-icon>cancel</mat-icon> Cancel\\r\\n    </button>      \\r\\n  </mat-dialog-actions>\\r\\n  \\r\\n</form>\\r\\n\"","module.exports = \".example-container {\\n  display: flex;\\n  flex-direction: column; }\\n\\n.example-container > * {\\n  width: 100%; }\\n\"","\nimport { MatDialogRef, MatSnackBar } from '@angular/material';\nimport { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\n\nimport { AppError } from '../../../common/app-error';\nimport { BadRequestError } from '../../../common/bad-request-error';\nimport { Position } from '../../models/Position';\nimport { PositionService } from '../../services/position.service';\n\n@Component({\n  selector: 'app-position-form',\n  templateUrl: './position-form.component.html',\n  styleUrls: ['./position-form.component.scss']\n})\nexport class PositionFormComponent implements OnInit {\n\n  positionFormGroup: FormGroup;\n  position: Position;\n  heading: string = 'New Position';\n\n  constructor(private dialogRef: MatDialogRef<PositionFormComponent>,\n    private fb: FormBuilder,\n    private positionService: PositionService,\n    public snackBar: MatSnackBar) { }\n\n  ngOnInit() {\n    this.positionFormGroup = this.fb.group({\n      id: new FormControl(this.position.Id),\n      name: new FormControl(this.position.Name, [Validators.required, Validators.minLength(10)])\n    });\n  }\n\n  create() {\n    if (this.position.Id == null) {\n      this.positionFormGroup.get('id').disable();\n      this.positionService.create(this.positionFormGroup.value)\n        .subscribe(response => {\n          this.snackBar.open('Successful!', 'Position Created', {\n            duration: 2000,\n          });\n          this.close();\n        },\n          (error: AppError) => {\n            if (error instanceof BadRequestError) {\n              this.positionFormGroup.setErrors(['BadRequest']);\n              this.snackBar.open('Bad Request!', 'Position not created', {\n                duration: 2000,\n              });\n              this.close();\n            } else {\n              this.snackBar.open('Unknown Error!', 'Position not created', {\n                duration: 2000,\n              });\n            }\n          }\n        );\n    } else {\n      this.positionService.update(this.positionFormGroup.value)\n        .subscribe(response => {\n          this.snackBar.open('Successful!', 'Position Updated', {\n            duration: 2000,\n          });\n          this.close();\n        },\n          (error: AppError) => {\n            if (error instanceof BadRequestError) {\n              this.positionFormGroup.setErrors(['BadRequest']);\n              this.snackBar.open('Bad Request!', 'Position not updated', {\n                duration: 2000,\n              });\n              this.close();\n            } else {\n              this.snackBar.open('Unknown Error!', 'Position not updated', {\n                duration: 2000,\n              });\n            }\n          }\n        );\n    }\n  }\n\n  close() {\n    this.dialogRef.close(null);\n  }\n\n  getErrorMessage(controlName: string) {\n    return  this.positionFormGroup.get(controlName).hasError('required') ? 'You must enter a value' :\n      this.positionFormGroup.get(controlName).hasError('minlength') ? 'You must enter atleast 10 characters' :\n        this.positionFormGroup.get(controlName).hasError('pattern') ? 'digit is not allowed' :\n          '';\n  }\n}\n","module.exports = \"<div class=\\\"material\\\">\\n  <mat-card>\\n    <div *ngIf=\\\"positions else loading\\\">\\n      <button mat-raised-button color=\\\"primary\\\" (click)=\\\"AddPositionFormDialog()\\\" class=\\\"material\\\">\\n        Add Position\\n      </button>\\n\\n      <br>\\n      <br>\\n      <mat-divider></mat-divider>\\n      <div class=\\\"example-container mat-elevation-z8\\\" class=\\\"material\\\">\\n        <mat-table #table [dataSource]=\\\"dataSource\\\">\\n\\n          <ng-container matColumnDef=\\\"Name\\\">\\n            <mat-header-cell *matHeaderCellDef class=\\\"material\\\"> Position </mat-header-cell>\\n            <mat-cell *matCellDef=\\\"let position\\\" class=\\\"material\\\"> {{ position.name }}</mat-cell>\\n          </ng-container>\\n\\n          <ng-container matColumnDef=\\\"edit\\\">\\n            <mat-header-cell *matHeaderCellDef class=\\\"material\\\"> Edit </mat-header-cell>\\n            <mat-cell *matCellDef=\\\"let position\\\">\\n              <a mat-button (click)=\\\"EditPositionFormDialog(position)\\\">\\n                <mat-icon color=\\\"primary\\\">edit</mat-icon>\\n              </a>\\n            </mat-cell>\\n          </ng-container>\\n\\n          <ng-container matColumnDef=\\\"delete\\\">\\n            <mat-header-cell *matHeaderCellDef class=\\\"material\\\"> Delete </mat-header-cell>\\n            <mat-cell *matCellDef=\\\"let position\\\">\\n              <a mat-button (click)=\\\"EditPositionFormDialog(position)\\\">\\n                <mat-icon color=\\\"warn\\\">delete </mat-icon>\\n              </a>\\n            </mat-cell>\\n          </ng-container>\\n\\n          <mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></mat-header-row>\\n          <mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></mat-row>\\n\\n        </mat-table>\\n\\n        <mat-paginator class=\\\"material\\\" [length]=\\\"length\\\" [pageSize]=\\\"pageSize\\\" [pageSizeOptions]=\\\"pageSizeOptions\\\" [pageIndex]=\\\"pageIndex\\\"\\n          (page)=\\\"pageEvent = $event; onPaginateChange($event)\\\">\\n        </mat-paginator>\\n\\n      </div>\\n    </div>\\n\\n    <ng-template #loading>\\n      <mat-progress-spinner style=\\\"margin:0 auto;\\\" [mode]=\\\"behavior\\\">\\n      </mat-progress-spinner>\\n    </ng-template>\\n  </mat-card>\\n\\n</div>\\n\"","module.exports = \".example-container {\\n  display: flex;\\n  flex-direction: column;\\n  max-height: 500px;\\n  min-width: 300px; }\\n\\n.mat-table {\\n  overflow: auto;\\n  max-height: 500px; }\\n\\n.material {\\n  font-family: cursive; }\\n\\n.material.mat-paginator {\\n  font-style: italic; }\\n\\n.material.mat-header-cell {\\n  font-weight: bold;\\n  font-size: medium;\\n  color: #3F51B5; }\\n\"","import { MatTableDataSource, PageEvent, MatDialog, MatSnackBar, MatChip } from '@angular/material';\n\nimport { Component, OnInit } from '@angular/core';\n\nimport { Position } from '../../models/Position';\nimport { PositionService } from '../../services/position.service';\n\nimport { AppError } from '../../../common/app-error';\nimport { NoConnectionError } from '../../../common/no-connection-error';\nimport { PositionFormComponent } from '../position-form/position-form.component';\n\n@Component({\n  selector: 'app-position-list',\n  templateUrl: './position-list.component.html',\n  styleUrls: ['./position-list.component.scss']\n})\nexport class PositionListComponent implements OnInit {\n  // model\n  position: Position;\n  positions: Position[];\n  // mat-table\n  displayedColumns = ['Name','edit','delete'];\n  dataSource: MatTableDataSource<Position>;\n  pageSize = 10;\n  pageSizeOptions = [5, 10, 25, 50, 100];\n  length: number;\n  pageEvent: PageEvent;\n  // loading\n  behavior = 'indeterminate';\n  constructor(private sectionService: PositionService,\n    private dialog: MatDialog,\n    private snackBar: MatSnackBar) { }\n\n  ngOnInit() {\n    this.loadRecords(1, this.pageSize);\n  }\n  onPaginateChange($event) {\n    this.loadRecords(this.pageEvent.pageIndex + 1, this.pageEvent.pageSize);\n  }\n\n  loadRecords(pageIndex, pageSize) {\n    this.sectionService.get(pageIndex, pageSize)\n      .subscribe(response => {\n        this.positions = response.json().positions;\n        this.length = response.json().count;\n        this.dataSource = new MatTableDataSource<Position>(this.positions);\n      },\n      (error: AppError) => {\n        if (error instanceof NoConnectionError) {\n          this.snackBar.open('Loading Failed' , 'No Connection', {\n            duration: 2000,\n          }\n        );\n        this.behavior = 'determinate';\n        }}\n    );\n  }\n\n  AddPositionFormDialog() {\n    const dialogRef = this.dialog.open(PositionFormComponent, {\n      width: '450px'\n    });\n    dialogRef.componentInstance.position = new Position();\n    dialogRef.afterClosed().subscribe(result => { this.ngOnInit(); });\n\n  }\n\n  EditPositionFormDialog(positionPassed) {\n    const dialogRef = this.dialog.open(PositionFormComponent, { width: '450px'});\n    dialogRef.componentInstance.position = new Position();\n    dialogRef.componentInstance.position.Id = positionPassed.id;\n    dialogRef.componentInstance.position.Name = positionPassed.name;\n    dialogRef.componentInstance.heading = 'Edit Position';\n    dialogRef.afterClosed().subscribe(result => { this.ngOnInit(); });\n  }\n\n}\n","module.exports = \"<p>\\n  prefectofdiscipline-form works!\\n</p>\\n\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-prefectofdiscipline-form',\n  templateUrl: './prefectofdiscipline-form.component.html',\n  styleUrls: ['./prefectofdiscipline-form.component.scss']\n})\nexport class PrefectofdisciplineFormComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"<p>\\n  prefectofdiscipline-list works!\\n</p>\\n\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-prefectofdiscipline-list',\n  templateUrl: './prefectofdiscipline-list.component.html',\n  styleUrls: ['./prefectofdiscipline-list.component.scss']\n})\nexport class PrefectofdisciplineListComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"\"","module.exports = \"\"","import { PrincipalService } from './../../services/principal.service';\nimport { MatSnackBar, MatDialogRef } from '@angular/material';\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { Component, OnInit } from '@angular/core';\nimport { Principal } from '../../models/principal';\n\n@Component({\n  selector: 'app-principal-form',\n  templateUrl: './principal-form.component.html',\n  styleUrls: ['./principal-form.component.scss']\n})\nexport class PrincipalFormComponent implements OnInit {\n  // Declarations\n  principalFormGroup: FormGroup;\n  principal: Principal;\n  // Constructor Injections\n  constructor(private dialogRef: MatDialogRef<PrincipalFormComponent>,\n    private fb: FormBuilder,\n    private snackbar: MatSnackBar,\n    private principalService: PrincipalService) { }\n\n  ngOnInit() {\n    this.principalFormGroup = this.fb.group({\n      employeeId: new FormControl('', [Validators.required, Validators.maxLength(6), Validators.minLength(6)])\n\n    });\n  }\n\n}\n","module.exports = \"<div *ngIf=\\\"principals else loading\\\">\\n<button mat-button color=\\\"primary\\\" (click) =\\\"AddPrincipalFormDialog()\\\">\\n  <mat-icon>person_add</mat-icon> New Principal\\n</button>\\n\\n<br>\\n<br>\\n<div class=\\\"example-container mat-elevation-z8\\\">\\n  <mat-table #table [dataSource]=\\\"dataSource\\\">\\n\\n        <!-- Name Column -->\\n        <ng-container matColumnDef=\\\"schoolId\\\">\\n          <mat-header-cell *matHeaderCellDef> SchoolId </mat-header-cell>\\n          <mat-cell *matCellDef=\\\"let principal\\\"><a routerLink=\\\"#\\\">{{ principal.schoolId}} </a></mat-cell>\\n        </ng-container>\\n\\n    <!-- Name Column -->\\n    <ng-container matColumnDef=\\\"school\\\">\\n      <mat-header-cell *matHeaderCellDef> School </mat-header-cell>\\n      <mat-cell *matCellDef=\\\"let principal\\\"><a routerLink=\\\"#\\\">{{ principal.station}} </a></mat-cell>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"name\\\">\\n      <mat-header-cell *matHeaderCellDef> Name </mat-header-cell>\\n      <mat-cell *matCellDef=\\\"let principal\\\"> {{ principal.firstName }} {{ principal.middleName }} {{ principal.lastName }}</mat-cell>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"position\\\">\\n      <mat-header-cell *matHeaderCellDef> Position </mat-header-cell>\\n      <mat-cell *matCellDef=\\\"let principal\\\"> {{ principal.position}} </mat-cell>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"schoolYear\\\">\\n      <mat-header-cell *matHeaderCellDef> SchoolYear </mat-header-cell>\\n      <mat-cell *matCellDef=\\\"let principal\\\"> {{ principal.schoolYear}} </mat-cell>\\n    </ng-container>\\n\\n    <mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></mat-header-row>\\n    <mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></mat-row>\\n\\n\\n  </mat-table>\\n\\n  <mat-paginator [length]=\\\"length\\\"\\n                 [pageSize]=\\\"pageSize\\\"\\n                 [pageSizeOptions]=\\\"pageSizeOptions\\\"\\n                 [pageIndex] =\\\"pageIndex\\\"\\n                 (page)=\\\"pageEvent = $event; onPaginateChange($event)\\\">\\n  </mat-paginator>\\n\\n</div>\\n</div>\\n\\n<ng-template #loading>\\n  <mat-progress-spinner style=\\\"margin:0 auto;\\\" [mode]=\\\"behavior\\\"></mat-progress-spinner>\\n</ng-template>\"","module.exports = \"\"","import { AppError } from './../../../common/app-error';\nimport { PrincipalFormComponent } from './../principal-form/principal-form.component';\n\nimport { Component, OnInit } from '@angular/core';\nimport { MatTableDataSource, PageEvent, MatDialog, MatSnackBar } from '@angular/material';\n\nimport { Principal } from '../../models/principal';\n\nimport { PrincipalService } from './../../services/principal.service';\nimport { NoConnectionError } from '../../../common/no-connection-error';\n\n@Component({\n  selector: 'app-principal-list',\n  templateUrl: './principal-list.component.html',\n  styleUrls: ['./principal-list.component.scss']\n})\nexport class PrincipalListComponent implements OnInit {\n\n  principal: Principal;\n  principals: Principal[];\n\n  displayedColumns = [ 'schoolId' , 'school' , 'name' , 'position' , 'schoolYear' ];\n  dataSource: MatTableDataSource<Principal>;\n  pageSize = 10;\n  pageSizeOptions = [5, 10, 25, 100];\n  length: number;\n  pageEvent: PageEvent;\n  // for mat-spinner\n  behavior = 'indeterminate';\n  // behavior = 'determinate';\n  constructor(private principalService: PrincipalService,\n    private dialog: MatDialog,\n    private snackBar: MatSnackBar) { }\n\n  ngOnInit() {\n    this.loadRecords(1, this.pageSize);\n  }\n\n  onPaginateChange($event) {\n    this.loadRecords(this.pageEvent.pageIndex + 1, this.pageEvent.pageSize);\n  }\n\n  loadRecords(pageIndex, pageSize) {\n    this.principalService.get(pageIndex, pageSize)\n      .subscribe(response => {\n        this.principals = response.json().principals;\n        this.dataSource = new MatTableDataSource<Principal>(this.principals);\n        this.length = response.json().count;\n        console.log(response);\n      },\n      (error: AppError) => {\n        if (error instanceof NoConnectionError) {\n          this.snackBar.open('Loading Failed' , 'No Connection', {\n            duration: 2000,\n          });\n          this.behavior = 'determinate';\n        }\n      });\n  }\n\n  AddPrincipalFormDialog() {\n    const dialogRef = this.dialog.open(PrincipalFormComponent, {\n      width: '450px'\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      this.ngOnInit();\n    });\n  }\n}\n","module.exports = \"<div *ngIf=\\\"employees else loading\\\">\\n\\n  <mat-toolbar color=\\\"primary\\\">\\n    <mat-icon style=\\\"padding-right:4em\\\">vpn_key</mat-icon>Registration Form\\n  </mat-toolbar>\\n\\n  <br>\\n  <br>\\n\\n  <form [formGroup]=\\\"registrationFormGroup\\\">\\n    <mat-dialog-content>\\n      <div class=\\\"example-container\\\">\\n        <!-- Roles -->\\n        \\n        <div class=\\\"example-container\\\" formGroupName=\\\"userRole\\\">\\n            <mat-form-field hintLabel=\\\"Select Role\\\">\\n              <mat-select placeholder=\\\"Role\\\" formControlName=\\\"roleId\\\" required>\\n                <mat-option *ngFor=\\\"let role of roles\\\" [value]=\\\"role.id\\\">{{role.name}}</mat-option>\\n              </mat-select>\\n            </mat-form-field>\\n        </div>\\n        <br>\\n        <mat-divider></mat-divider>\\n        <br>\\n        <!-- EmployeeNumber -->\\n        <mat-form-field hintLabel=\\\"7 digits\\\">\\n          <input type=\\\"text\\\" placeholder=\\\"Employee Number\\\" aria-label=\\\"Number\\\" matInput formControlName=\\\"employeeNumber\\\" [matAutocomplete]=\\\"auto\\\" (blur)=\\\"onBlur()\\\">\\n          <mat-autocomplete autoActiveFirstOption #auto=\\\"matAutocomplete\\\">\\n            <mat-option *ngFor=\\\"let option of filteredOptions | async\\\" [value]=\\\"option\\\">\\n              {{ option }}\\n            </mat-option>\\n          </mat-autocomplete>\\n        </mat-form-field>\\n        <br>\\n        <mat-divider></mat-divider>\\n        <br>\\n        <!-- Password -->\\n        <mat-form-field hintLabel=\\\"10 characters\\\">\\n          <input matInput placeholder=\\\"Enter your password\\\" [type]=\\\"hide1 ? 'password' : 'text'\\\" formControlName=\\\"password\\\" required\\n            maxlength=\\\"10\\\" minlength=\\\"10\\\">\\n          <mat-icon matSuffix (click)=\\\"hide1 = !hide1\\\">{{hide1 ? 'visibility' : 'visibility_off'}}</mat-icon>\\n          <mat-error *ngIf=\\\"registrationFormGroup.get('password').invalid\\\">{{getErrorMessage('password')}}</mat-error>\\n          <mat-hint align=\\\"end\\\">{{registrationFormGroup.get('password').value?.length || 0}}/10</mat-hint>\\n        </mat-form-field>\\n\\n        <br>\\n        <mat-divider></mat-divider>\\n        <br>\\n        <!-- confirm password -->\\n        <mat-form-field hintLabel=\\\"10 characters\\\">\\n          <input matInput placeholder=\\\"Re-Enter your password\\\" [type]=\\\"hide2 ? 'password' : 'text'\\\" required maxlength=\\\"10\\\" minlength=\\\"10\\\"\\n            required [errorStateMatcher]=\\\"matcher\\\">\\n          <mat-icon matSuffix (click)=\\\"hide2 = !hide2\\\">{{hide2 ? 'visibility' : 'visibility_off'}}</mat-icon>\\n          <mat-error *ngIf=\\\"true\\\">password doesnt match</mat-error>\\n        </mat-form-field>\\n\\n      </div>\\n    </mat-dialog-content>\\n  </form>\\n\\n  <mat-dialog-actions>\\n    <button mat-button color=\\\"primary\\\" [disabled]=\\\"!registrationFormGroup.valid\\\" (click)=\\\"create()\\\">\\n      <mat-icon>save</mat-icon> Register\\n    </button>\\n    <button mat-button color=\\\"primary\\\" (click)=\\\"close()\\\">\\n      <mat-icon>cancel</mat-icon> Cancel\\n    </button>\\n  </mat-dialog-actions>\\n</div>\\n\\n\\n\\n<ng-template #loading>\\n  <mat-spinner style=\\\"margin:0 auto;\\\" mode=\\\"indeterminate\\\"></mat-spinner>\\n</ng-template>\\n\\n<p>  {{ registrationFormGroup.value | json }} </p>\"","module.exports = \".example-container {\\n  display: flex;\\n  flex-direction: column; }\\n\\n.example-container > * {\\n  width: 100%; }\\n\"","import { AppError } from './../../../common/app-error';\nimport { RoleService } from './../../services/role.service';\n\nimport { EmployeeService } from './../../services/employee.service';\nimport { Employee } from './../../models/employee';\nimport { UserService } from './../../services/user.service';\nimport { MatDialogRef, MatSnackBar, ErrorStateMatcher } from '@angular/material';\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { Component, OnInit } from '@angular/core';\nimport { Role } from '../../models/role';\nimport {Observable} from 'rxjs/Observable';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {map} from 'rxjs/operators/map';\nimport { User } from '../../models/user';\nimport { BadRequestError } from '../../../common/bad-request-error';\nimport { NoConnectionError } from '../../../common/no-connection-error';\n\n@Component({\n  selector: 'app-registration-form',\n  templateUrl: './registration-form.component.html',\n  styleUrls: ['./registration-form.component.scss']\n})\n\nexport class RegistrationFormComponent implements OnInit {\n\n    roles: Role[];\n    employees: Employee[];\n    registrationFormGroup: FormGroup;\n    user: User;\n    roleGroup: FormGroup;\n    hide1 = true;\n    hide2 = true;\n    options: string[];\n    filteredOptions: Observable<string[]>;\n  constructor(private dialogRef: MatDialogRef<RegistrationFormComponent>,\n    private fb: FormBuilder,\n    private userService: UserService,\n    private employeeService: EmployeeService,\n    private roleService: RoleService,\n    private snackBar: MatSnackBar) { }\n\n  ngOnInit() {\n    // create formGroup\n    this.registrationFormGroup = this.fb.group({\n      employeeNumber: new FormControl('', [Validators.required, Validators.maxLength(7), Validators.minLength(7)]),\n      password: new FormControl('', [Validators.required, Validators.maxLength(10), Validators.minLength(10)]),\n      employeeId: new FormControl('', [Validators.required]),\n      userRole: this.fb.group({\n        roleId: new FormControl('', [Validators.required])\n      })\n    });\n    // call all employees that are for registrations\n    this.employeeService.getByUrl(this.employeeService.urlForRegistration)\n      .subscribe(response => { this.employees = response.json();\n        this.options = this.employees.map(p => p.employeeNumber);\n    },\n    (error: AppError) => {\n      if (error instanceof NoConnectionError) {\n        this.snackBar.open('Loading Failed' , 'No Connection', {\n          duration: 2000,\n        });\n        this.dialogRef.close();\n      }});\n    // call roles for populate dropdown\n    this.roleService.getAll()\n      .subscribe(response => {\n        this.roles = response.json();\n      });\n    // autocomplete in input\n    this.filteredOptions = this.registrationFormGroup.get('employeeNumber').valueChanges.pipe(\n      startWith(''),\n      map(val => this.filter(val))\n    );\n  }\n\n  create() {\n    this.user = this.registrationFormGroup.value;\n    this.userService.create(this.user)\n      .subscribe(response => {\n        this.snackBar.open('Successful', 'User Created', {\n          duration: 2000,\n        });\n        this.close();\n      },\n      (error: AppError) => {\n        if (error instanceof BadRequestError) {\n          this.registrationFormGroup.setErrors(['BadRequest']);\n          this.snackBar.open('Bad Request!', 'User not created', {\n            duration: 2000,\n          });\n          this.close();\n        } else {\n          this.snackBar.open('Unknown Error!', 'User not created', {\n          duration: 2000,\n        }); }\n      });\n  }\n\n  close() {\n    this.dialogRef.close(null);\n  }\n\n  onBlur() {\n    const id = +this.employees\n      .filter(p => p.employeeNumber === this.registrationFormGroup.get('employeeNumber').value)\n      .map(p => p.id);\n    this.registrationFormGroup.get('employeeId').setValue(id);\n  }\n  \n  getErrorMessage(controlName: string) {\n    if (controlName === 'employeeNumber') {\n      return this.registrationFormGroup.get(controlName).hasError('minlength') ? 'You must enter 7 digits' :\n      this.registrationFormGroup.get(controlName).hasError('pattern') ? 'You must enter digits only' : '' ;\n    }\n    // tslint:disable-next-line:one-line\n    else {\n    return this.registrationFormGroup.get(controlName).hasError('required') ? 'You must enter a value' :\n    this.registrationFormGroup.get(controlName).hasError('minlength') ? 'You must enter 10 characters' :\n    this.registrationFormGroup.get(controlName).hasError('pattern') ? 'You must enter alphabet characters only' :\n    '' ;\n    }\n  }\n  filter(val: string): string[] {\n    return this.options.filter(opt => opt.toString().toLowerCase().indexOf(val.toString().toLowerCase()) === 0);\n  }\n}\n","module.exports = \"\\n  <mat-toolbar color=\\\"primary\\\" class=\\\"example-container\\\">\\n    <mat-icon style=\\\"padding-right:4em\\\">clear_all</mat-icon> {{ heading }}\\n  </mat-toolbar>\\n\\n<br>\\n<br>\\n\\n<form [formGroup]=\\\"sectionFormGroup\\\">\\n  <mat-dialog-content>\\n    <div class=\\\"example-container\\\">\\n      <!-- Section Name-->\\n      <mat-form-field hintLabel=\\\"atleast 3 characters\\\">\\n        <input matInput placeholder=\\\"Section\\\" formControlName=\\\"name\\\" required maxlength=\\\"20\\\" minlength=\\\"3\\\" pattern=\\\"[a-zA-Z][a-zA-Z .,]+\\\">\\n        <mat-error *ngIf=\\\"sectionFormGroup.get('name').invalid\\\">{{getErrorMessage('name')}}</mat-error>\\n        <mat-hint align=\\\"end\\\">{{sectionFormGroup.get('name').value?.length || 0}}/20</mat-hint>\\n      </mat-form-field>\\n    \\n    </div>\\n  </mat-dialog-content>\\n\\n  <br>\\n  <mat-divider></mat-divider>\\n  <br>\\n\\n  <mat-dialog-actions>\\n    <button mat-raised-button color=\\\"primary\\\" color=\\\"primary\\\" [disabled]=\\\"!sectionFormGroup.valid\\\" (click)=\\\"create()\\\">\\n      <mat-icon>save</mat-icon> Save\\n    </button>\\n    <button mat-raised-button color=\\\"primary\\\" (click)=\\\"close()\\\">\\n      <mat-icon>cancel</mat-icon> Cancel\\n    </button>      \\n  </mat-dialog-actions>\\n  \\n</form>\\n\"","module.exports = \".example-container {\\n  margin-top: 0%;\\n  padding: 0%;\\n  margin-right: 20px;\\n  font-family: cursive; }\\n\\n.example-container > * {\\n  width: 100%; }\\n\"","import { SectionService } from './../../services/section.service';\nimport { MatDialogRef, MatSnackBar } from '@angular/material';\nimport { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\nimport { Section } from '../../models/section';\nimport { AppError } from '../../../common/app-error';\nimport { BadRequestError } from '../../../common/bad-request-error';\n\n@Component({\n  selector: 'app-section-form',\n  templateUrl: './section-form.component.html',\n  styleUrls: ['./section-form.component.scss']\n})\nexport class SectionFormComponent implements OnInit {\n\n  sectionFormGroup: FormGroup;\n  section: Section;\n  heading: string = 'New Section';\n\n  constructor(private dialogRef: MatDialogRef<SectionFormComponent>,\n    private fb: FormBuilder,\n    private sectionService: SectionService,\n    public snackBar: MatSnackBar) { }\n\n  ngOnInit() {\n    this.sectionFormGroup = this.fb.group({\n      id: new FormControl(this.section.Id),\n      name: new FormControl(this.section.Name, [Validators.required, Validators.minLength(3)])\n    });\n  }\n\n  create() {\n    if (this.section.Id == null) {\n      this.sectionFormGroup.get('id').disable();\n      this.sectionService.create(this.sectionFormGroup.value)\n        .subscribe(response => {\n          this.snackBar.open('Successful!', 'Section Created', {\n            duration: 2000,\n          });\n          this.close();\n        },\n          (error: AppError) => {\n            if (error instanceof BadRequestError) {\n              this.sectionFormGroup.setErrors(['BadRequest']);\n              this.snackBar.open('Bad Request!', 'Section not created', {\n                duration: 2000,\n              });\n              this.close();\n            } else {\n              this.snackBar.open('Unknown Error!', 'Section not created', {\n                duration: 2000,\n              });\n            }\n          }\n        );\n    } else {\n      this.sectionService.update(this.sectionFormGroup.value)\n        .subscribe(response => {\n          this.snackBar.open('Successful!', 'Section Updated', {\n            duration: 2000,\n          });\n          this.close();\n        },\n          (error: AppError) => {\n            if (error instanceof BadRequestError) {\n              this.sectionFormGroup.setErrors(['BadRequest']);\n              this.snackBar.open('Bad Request!', 'Section not updated', {\n                duration: 2000,\n              });\n              this.close();\n            } else {\n              this.snackBar.open('Unknown Error!', 'Section not updated', {\n                duration: 2000,\n              });\n            }\n          }\n        );\n    }\n  }\n\n  close() {\n    this.dialogRef.close(null);\n  }\n\n  getErrorMessage(controlName: string) {\n    return this.sectionFormGroup.get(controlName).hasError('required') ? 'You must enter a value' :\n      this.sectionFormGroup.get(controlName).hasError('minlength') ? 'You must enter atleast 3 characters' :\n        this.sectionFormGroup.get(controlName).hasError('pattern') ? 'digit is not allowed' :\n          '';\n  }\n}\n","module.exports = \"<div class=\\\"material\\\">\\n  <mat-card>\\n    <div *ngIf=\\\"sections else loading\\\" class=\\\"material\\\">\\n\\n      <button mat-raised-button color=\\\"primary\\\" (click)=\\\"AddSectionFormDialog()\\\" class=\\\"material\\\">\\n        Add Section\\n      </button>\\n\\n      <br>\\n      <br>\\n      <mat-divider></mat-divider>\\n      <div class=\\\"example-container mat-elevation-z8\\\" class=\\\"material\\\">\\n        <mat-table #table [dataSource]=\\\"dataSource\\\">\\n\\n          <ng-container matColumnDef=\\\"Name\\\">\\n            <mat-header-cell *matHeaderCellDef class=\\\"material\\\"> Section </mat-header-cell>\\n            <mat-cell *matCellDef=\\\"let section\\\" class=\\\"material\\\"> {{ section.name }}</mat-cell>\\n          </ng-container>\\n\\n          <ng-container matColumnDef=\\\"edit\\\">\\n            <mat-header-cell *matHeaderCellDef class=\\\"material\\\"> Edit </mat-header-cell>\\n            <mat-cell *matCellDef=\\\"let section\\\">\\n              <a mat-button (click)=\\\"EditSectionFormDialog(section)\\\">\\n                <mat-icon color=\\\"primary\\\">edit</mat-icon>\\n              </a>\\n            </mat-cell>\\n          </ng-container>\\n\\n          <ng-container matColumnDef=\\\"delete\\\">\\n            <mat-header-cell *matHeaderCellDef class=\\\"material\\\"> Delete </mat-header-cell>\\n            <mat-cell *matCellDef=\\\"let section\\\">\\n              <a mat-button (click)=\\\"EditSectionFormDialog(section)\\\">\\n                <mat-icon color=\\\"warn\\\">delete </mat-icon>\\n              </a>\\n            </mat-cell>\\n          </ng-container>\\n\\n          <mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></mat-header-row>\\n          <mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></mat-row>\\n\\n        </mat-table>\\n\\n        <mat-paginator class=\\\"material\\\" [length]=\\\"length\\\" [pageSize]=\\\"pageSize\\\" [pageSizeOptions]=\\\"pageSizeOptions\\\" [pageIndex]=\\\"pageIndex\\\"\\n          (page)=\\\"pageEvent = $event; onPaginateChange($event)\\\">\\n        </mat-paginator>\\n\\n      </div>\\n    </div>\\n  </mat-card>\\n  <ng-template #loading>\\n    <mat-progress-spinner style=\\\"margin:0 auto;\\\" [mode]=\\\"behavior\\\">\\n    </mat-progress-spinner>\\n  </ng-template>\\n</div>\\n\"","module.exports = \".example-container {\\n  display: flex;\\n  flex-direction: column;\\n  max-height: 500px;\\n  min-width: 300px; }\\n\\n.mat-table {\\n  overflow: auto;\\n  max-height: 500px; }\\n\\n.material {\\n  font-family: cursive; }\\n\\n.material h1, h2, h3, h4, h5 {\\n  text-align: center;\\n  color: purple; }\\n\\n.material.mat-paginator {\\n  font-style: italic; }\\n\\n.material.mat-header-cell {\\n  font-weight: bold;\\n  font-size: medium;\\n  color: #3F51B5; }\\n\"","import { SectionFormComponent } from './../section-form/section-form.component';\nimport { MatTableDataSource, PageEvent, MatDialog, MatSnackBar, MatChip } from '@angular/material';\n\nimport { Component, OnInit } from '@angular/core';\n\nimport { Section } from '../../models/section';\n\nimport { SectionService } from '../../services/section.service';\nimport { AppError } from '../../../common/app-error';\nimport { NoConnectionError } from '../../../common/no-connection-error';\n\n@Component({\n  selector: 'app-section-list',\n  templateUrl: './section-list.component.html',\n  styleUrls: ['./section-list.component.scss']\n})\nexport class SectionListComponent implements OnInit {\n  // model\n  section: Section;\n  sections: Section[];\n  // mat-table\n  displayedColumns = ['Name','edit','delete'];\n  dataSource: MatTableDataSource<Section>;\n  pageSize = 10;\n  pageSizeOptions = [5, 10, 25, 50, 100];\n  length: number;\n  pageEvent: PageEvent;\n  // loading\n  behavior = 'indeterminate';\n  constructor(private sectionService: SectionService,\n    private dialog: MatDialog,\n    private snackBar: MatSnackBar) { }\n\n  ngOnInit() {\n    this.loadRecords(1, this.pageSize);\n  }\n  onPaginateChange($event) {\n    this.loadRecords(this.pageEvent.pageIndex + 1, this.pageEvent.pageSize);\n  }\n\n  loadRecords(pageIndex, pageSize) {\n    this.sectionService.get(pageIndex, pageSize)\n      .subscribe(response => {\n        this.sections = response.json().sections;\n        this.length = response.json().count;\n        this.dataSource = new MatTableDataSource<Section>(this.sections);\n      },\n      (error: AppError) => {\n        if (error instanceof NoConnectionError) {\n          this.snackBar.open('Loading Failed' , 'No Connection', {\n            duration: 2000,\n          }\n        );\n        this.behavior = 'determinate';\n        }}\n    );\n  }\n\n  AddSectionFormDialog() {\n    const dialogRef = this.dialog.open(SectionFormComponent, {\n      width: '450px'\n    });\n    dialogRef.componentInstance.section = new Section();\n    dialogRef.afterClosed().subscribe(result => { this.ngOnInit(); });\n\n  }\n\n  EditSectionFormDialog(sectionPassed) {\n    const dialogRef = this.dialog.open(SectionFormComponent, { width: '450px'});\n    dialogRef.componentInstance.section = new Section();\n    dialogRef.componentInstance.section.Id = sectionPassed.id;\n    dialogRef.componentInstance.section.Name = sectionPassed.name;\n    dialogRef.componentInstance.heading = 'Edit Section';\n    dialogRef.afterClosed().subscribe(result => { this.ngOnInit(); });\n  }\n\n}\n","module.exports = \"\\n<mat-sidenav-container class=\\\"app-sidenav-container\\\">\\n <!-- <mat-sidenav #sidenav class=\\\"app-sidenav mat-elevation-z10\\\" [opened]=\\\"authService.isLoggedIn()\\\" [mode]=\\\"isScreenSmall() ? 'over' : 'side'\\\"> -->\\n  <mat-sidenav #sidenav class=\\\"app-sidenav mat-elevation-z10\\\" [opened]=\\\"!isScreenSmall() && authService.isLoggedIn()\\\" [mode]=\\\"isScreenSmall() ? 'over' : 'side'\\\">\\n    <mat-toolbar color=\\\"primary\\\" class=\\\"material\\\">\\n      Gui-Col Sys\\n    </mat-toolbar>\\n    <mat-nav-list class=\\\"material\\\">\\n\\n        <a mat-list-item [routerLink]=\\\"['/quonmanager/dashboard']\\\" class=\\\"material\\\">\\n          <mat-icon mat-list-icon color=\\\"primary\\\">dashboard</mat-icon>\\n          <span class=\\\"title\\\" mat-line>Dashboard</span>\\n        </a>\\n\\n        <a mat-list-item [routerLink]=\\\"['/quonmanager/station-list']\\\" class=\\\"material\\\">\\n          <mat-icon mat-list-icon color=\\\"primary\\\">location_city</mat-icon>\\n          <span class=\\\"title\\\" mat-line>Stations</span>\\n        </a>\\n\\n        <a mat-list-item [routerLink]=\\\"['/quonmanager/position-list']\\\" class=\\\"material\\\">\\n          <mat-icon mat-list-icon color=\\\"primary\\\">local_parking</mat-icon>\\n          <span class=\\\"title\\\" mat-line>Positions</span>\\n        </a>\\n\\n        <a mat-list-item [routerLink]=\\\"['/quonmanager/section-list']\\\" class=\\\"material\\\">\\n          <mat-icon mat-list-icon color=\\\"primary\\\">account_balance</mat-icon>\\n          <span class=\\\"title\\\" mat-line>Sections</span>\\n        </a>\\n\\n        <a mat-list-item [routerLink]=\\\"['/quonmanager/employee-list']\\\" class=\\\"material\\\">\\n          <mat-icon mat-list-icon color=\\\"primary\\\">group</mat-icon>\\n          <span class=\\\"title\\\" mat-line>Employees</span>\\n        </a>\\n\\n        <a mat-list-item [routerLink]=\\\"['/quonmanager/guardian-list']\\\" class=\\\"material\\\">\\n          <mat-icon mat-list-icon color=\\\"primary\\\">vpn_lock</mat-icon>\\n          <span class=\\\"title\\\" mat-line>Guardians</span>\\n        </a>\\n\\n        <a mat-list-item [routerLink]=\\\"['/quonmanager/student-list']\\\" class=\\\"material\\\">\\n          <mat-icon mat-list-icon color=\\\"primary\\\">device_hub</mat-icon>\\n          <span class=\\\"title\\\" mat-line>Students</span>\\n        </a>\\n\\n        <a mat-list-item [routerLink]=\\\"['/quonmanager/levelsection-list']\\\" class=\\\"material\\\">\\n          <mat-icon mat-list-icon color=\\\"primary\\\">wc</mat-icon>\\n          <span class=\\\"title\\\" mat-line class=\\\"material\\\">Section Assignment</span>\\n        </a>\\n\\n\\n\\n        <a mat-list-item [routerLink]=\\\"['/quonmanager']\\\" class=\\\"material\\\">\\n          <mat-icon mat-list-icon color=\\\"primary\\\">vpn_lock</mat-icon>\\n          <span class=\\\"title\\\" mat-line>Prefect of Disciplines</span>\\n        </a>\\n\\n        <a mat-list-item [routerLink]=\\\"['/quonmanager']\\\" class=\\\"material\\\">\\n          <mat-icon mat-list-icon color=\\\"primary\\\">local_library</mat-icon>\\n          <span class=\\\"title\\\" mat-line >Guidance Councilors</span>\\n        </a>\\n\\n        <a mat-list-item [routerLink]=\\\"['/quonmanager/training-list']\\\" class=\\\"material\\\">\\n          <mat-icon mat-list-icon color=\\\"primary\\\">local_library</mat-icon>\\n          <span class=\\\"title\\\" mat-line >Seminars/Trainings</span>\\n        </a>\\n  \\n    </mat-nav-list>\\n\\n  </mat-sidenav>\\n\\n\\n  <div class=\\\"app-sidenav-content\\\">\\n    <app-toolbar (toggleSidenav)=\\\"sidenav.toggle()\\\"></app-toolbar> \\n    <div class=\\\"wrapper\\\">\\n      <router-outlet></router-outlet>\\n    </div>\\n  </div>\\n</mat-sidenav-container>\\n\"","module.exports = \".app-sidenav-container {\\n  flex: 1;\\n  position: fixed;\\n  width: 100%;\\n  min-width: 100%;\\n  height: 100%;\\n  min-height: 100%; }\\n\\n.app-sidenav-content {\\n  display: flex;\\n  height: 100%;\\n  flex-direction: column;\\n  padding-top: 0%; }\\n\\n.app-sidenav {\\n  width: 270px; }\\n\\n.wrapper {\\n  margin: 50px; }\\n\\n.material {\\n  font-family: cursive;\\n  font-weight: bold; }\\n\\n.material.mat-toolbar {\\n  margin-bottom: 0%; }\\n\\n.material.mat-nav-list {\\n  margin-top: 0%; }\\n\"","import { AuthService } from './../../services/auth.service';\nimport { Observable } from 'rxjs/Observable';\nimport { Component, OnInit } from '@angular/core';\nimport { MediaQueryList } from '@angular/flex-layout';\nimport { NgZone } from '@angular/core';\n\nconst SMALL_WIDTH_BREAKPOINT = 720;\n\n@Component({\n  selector: 'app-sidenav',\n  templateUrl: './sidenav.component.html',\n  styleUrls: ['./sidenav.component.scss']\n})\nexport class SidenavComponent implements OnInit {\n\n\n  isSmall: boolean;\n  isAuthenticated: boolean;\n  private mediaMatcher: MediaQueryList =\n    matchMedia(`(max-width: ${SMALL_WIDTH_BREAKPOINT}px)`);\n  constructor(zone: NgZone, public authService: AuthService) {\n    this.mediaMatcher.addListener(mql =>\n      zone.run(() => this.mediaMatcher = mql));\n  }\n\n  ngOnInit() {\n  }\n\n  isScreenSmall(): boolean {\n    return this.mediaMatcher.matches;\n  }\n\n\n  isOpened(): boolean {\n    this.isAuthenticated = this.authService.isLoggedIn();\n    if (this.isAuthenticated) {\n      return true;\n    }\n    return false;\n  }\n\n\n}\n","module.exports = \"<mat-toolbar color=\\\"primary\\\">\\n  <mat-icon style=\\\"padding-right:4em\\\">clear_all</mat-icon> {{ heading }}\\n</mat-toolbar>\\n\\n<br>\\n<br>\\n\\n<form [formGroup]=\\\"stationFormGroup\\\">\\n  <mat-dialog-content>\\n    <div class=\\\"example-container\\\">\\n      <!-- School ID-->\\n      <mat-form-field hintLabel=\\\"6 digits\\\">\\n        <input matInput placeholder=\\\"School ID\\\" formControlName=\\\"schoolId\\\"  minlength=\\\"6\\\" maxlength=\\\"6\\\" pattern=\\\"[0-9]+\\\">\\n        <mat-error *ngIf=\\\"stationFormGroup.get('schoolId').invalid\\\">{{getErrorMessage('schoolId')}}</mat-error>\\n        <mat-hint align=\\\"end\\\">{{stationFormGroup.get('schoolId').value?.length || 0}}/6</mat-hint>\\n      </mat-form-field>\\n      <!-- Station ID -->\\n      <mat-form-field hintLabel=\\\"3 digits\\\">\\n        <input matInput placeholder=\\\"Station ID\\\" formControlName=\\\"stationNumber\\\" required maxlength=\\\"3\\\" minlength=\\\"3\\\" pattern=\\\"[0-9]+\\\">\\n        <mat-error *ngIf=\\\"stationFormGroup.get('stationNumber').invalid\\\">{{getErrorMessage('stationNumber')}}</mat-error>\\n        <mat-hint align=\\\"end\\\">{{stationFormGroup.get('stationNumber').value?.length || 0}}/3</mat-hint>\\n      </mat-form-field>\\n      <!-- Section Name-->\\n      <mat-form-field hintLabel=\\\"atleast 25 characters\\\">\\n        <input matInput placeholder=\\\"Station\\\" formControlName=\\\"name\\\" required  minlength=\\\"25\\\" pattern=\\\"[a-zA-Z][a-zA-Z ,.]+\\\">\\n        <mat-error *ngIf=\\\"stationFormGroup.get('name').invalid\\\">{{getErrorMessage('name')}}</mat-error>\\n        <mat-hint align=\\\"end\\\">{{stationFormGroup.get('name').value?.length || 0}}/25</mat-hint>\\n      </mat-form-field>\\n\\n    </div>\\n  </mat-dialog-content>\\n\\n  <br>\\n  <mat-divider></mat-divider>\\n  <br>\\n\\n  <mat-dialog-actions>\\n    <button mat-raised-button color=\\\"primary\\\" color=\\\"primary\\\" [disabled]=\\\"!stationFormGroup.valid\\\" (click)=\\\"create()\\\">\\n      <mat-icon>save</mat-icon> Save\\n    </button>\\n    <button mat-raised-button color=\\\"primary\\\" (click)=\\\"close()\\\">\\n      <mat-icon>cancel</mat-icon> Cancel\\n    </button>\\n  </mat-dialog-actions>\\n\\n</form>\"","module.exports = \".example-container {\\n  display: flex;\\n  flex-direction: column; }\\n\\n.example-container > * {\\n  width: 100%; }\\n\"","import { Component, OnInit } from '@angular/core';\nimport { Station } from '../../models/Station';\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { MatDialogRef, MatSnackBar } from '@angular/material';\nimport { StationService } from '../../services/station.service';\nimport { AppError } from '../../../common/app-error';\nimport { BadRequestError } from '../../../common/bad-request-error';\n\n@Component({\n  selector: 'app-station-form',\n  templateUrl: './station-form.component.html',\n  styleUrls: ['./station-form.component.scss']\n})\nexport class StationFormComponent implements OnInit {\n\n  stationFormGroup: FormGroup;\n  station: Station;\n  heading: string = 'New Station';\n  constructor(private dialogRef: MatDialogRef<StationFormComponent>,\n    private fb: FormBuilder,\n    private stationService: StationService,\n    private snackBar: MatSnackBar) { }\n\n  ngOnInit() {\n    this.stationFormGroup = this.fb.group({\n      id: new FormControl(this.station.Id),\n      name: new FormControl(this.station.Name, [Validators.required,  Validators.minLength(25)]),\n      schoolId: new FormControl(this.station.SchoolId, [Validators.required, Validators.maxLength(6), Validators.minLength(6)]),\n      stationNumber: new FormControl(this.station.StationNumber, [Validators.required,  Validators.maxLength(3), Validators.minLength(3)])\n    });\n  }\n\n  create() {\n    if (this.station.Id == null) {\n      this.stationFormGroup.get('id').disable();\n      this.stationService.create(this.stationFormGroup.value)\n        .subscribe(response => {\n          console.log(response);\n          this.snackBar.open('Successful', 'Station Created', {\n            duration: 2000,\n          });\n          this.close();\n\n        },\n          (error: AppError) => {\n            if (error instanceof BadRequestError) {\n              this.stationFormGroup.setErrors(['BadRequest']);\n              this.snackBar.open('Bad Request!', 'Station not created', {\n                duration: 2000,\n              });\n              this.close();\n            } else {\n              this.snackBar.open('Unknown Error!', 'Station not created', {\n                duration: 2000,\n              });\n            }\n          }\n        );\n    } else {\n      this.stationService.update(this.stationFormGroup.value)\n        .subscribe(response => {\n          this.snackBar.open('Successful!', 'Station Updated', {\n            duration: 2000,\n          });\n          this.close();\n        },\n          (error: AppError) => {\n            if (error instanceof BadRequestError) {\n              this.stationFormGroup.setErrors(['BadRequest']);\n              this.snackBar.open('Bad Request!', 'Station not updated', {\n                duration: 2000,\n              });\n              this.close();\n            } else {\n              this.snackBar.open('Unknown Error!', 'Station not updated', {\n                duration: 2000,\n              });\n            }\n          }\n        );\n    }\n  }\n\n  close() {\n    this.dialogRef.close(null);\n  }\n\n  getErrorMessage(controlName: string) {\n    if(controlName == 'schoolId')\n    {\n    return this.stationFormGroup.get(controlName).hasError('required') ? 'You must enter a value' :\n      this.stationFormGroup.get(controlName).hasError('minlength') ? 'You must enter 6 digit' :\n        this.stationFormGroup.get(controlName).hasError('pattern') ? 'character is not allowed' :\n          '';\n    }\n    else if( controlName == 'stationNumber') {\n      return this.stationFormGroup.get(controlName).hasError('required') ? 'You must enter a value' :\n      this.stationFormGroup.get(controlName).hasError('minlength') ? 'You must enter 3 digit' :\n        this.stationFormGroup.get(controlName).hasError('pattern') ? 'character is not allowed' :\n          '';\n    }\n    else {\n      return this.stationFormGroup.get(controlName).hasError('required') ? 'You must enter a value' :\n      this.stationFormGroup.get(controlName).hasError('minlength') ? 'You must enter atleast 25 characters' :\n        this.stationFormGroup.get(controlName).hasError('pattern') ? 'character is not allowed' :\n          '';\n    }\n\n  }\n\n}\n","module.exports = \"<div class=\\\"material\\\">\\n  <mat-card> \\n  \\n  <div *ngIf=\\\"stations else loading\\\">\\n    <button mat-raised-button color=\\\"primary\\\" (click)=\\\"AddStationFormDialog()\\\" class=\\\"material\\\">\\n      Add Station\\n    </button>\\n\\n    <br>\\n    <br>\\n    <mat-divider></mat-divider>\\n    <div class=\\\"example-container mat-elevation-z8\\\" class=\\\"material\\\">\\n      <mat-table #table [dataSource]=\\\"dataSource\\\">\\n\\n        <ng-container matColumnDef=\\\"Station\\\">\\n          <mat-header-cell *matHeaderCellDef class=\\\"material\\\"> Station </mat-header-cell>\\n          <mat-cell *matCellDef=\\\"let station\\\" class=\\\"material\\\"> {{ station.name }}</mat-cell>\\n        </ng-container>\\n\\n        <ng-container matColumnDef=\\\"SchoolId\\\">\\n          <mat-header-cell *matHeaderCellDef class=\\\"material\\\"> School ID </mat-header-cell>\\n          <mat-cell *matCellDef=\\\"let station\\\" class=\\\"material\\\"> {{ station.schoolId }}</mat-cell>\\n        </ng-container>\\n\\n        <ng-container matColumnDef=\\\"StationNumber\\\">\\n          <mat-header-cell *matHeaderCellDef class=\\\"material\\\"> ID </mat-header-cell>\\n          <mat-cell *matCellDef=\\\"let station\\\" class=\\\"material\\\"> {{ station.stationNumber }}</mat-cell>\\n        </ng-container>\\n\\n        <ng-container matColumnDef=\\\"Edit\\\">\\n          <mat-header-cell *matHeaderCellDef class=\\\"material\\\"> Edit </mat-header-cell>\\n          <mat-cell *matCellDef=\\\"let station\\\">\\n              <a mat-button (click)=\\\"EditStationFormDialog(station)\\\"><mat-icon color=\\\"primary\\\">edit</mat-icon> </a> \\n          </mat-cell>\\n        </ng-container>\\n\\n        <ng-container matColumnDef=\\\"Delete\\\">\\n          <mat-header-cell *matHeaderCellDef class=\\\"material\\\"> Delete </mat-header-cell>\\n          <mat-cell *matCellDef=\\\"let station\\\"> \\n            <a mat-button (click)=\\\"EditStationFormDialog(station)\\\"> <mat-icon color=\\\"warn\\\">delete </mat-icon> </a>\\n          </mat-cell>\\n        </ng-container>\\n\\n        <mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></mat-header-row>\\n        <mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></mat-row>\\n\\n      </mat-table>\\n\\n      <mat-paginator class=\\\"material\\\" [length]=\\\"length\\\" [pageSize]=\\\"pageSize\\\" [pageSizeOptions]=\\\"pageSizeOptions\\\" [pageIndex]=\\\"pageIndex\\\" (page)=\\\"pageEvent = $event; onPaginateChange($event)\\\">\\n      </mat-paginator>\\n\\n    </div>\\n  </div>\\n\\n  <ng-template #loading>\\n    <mat-progress-spinner  style=\\\"margin:0 auto;\\\" [mode]=\\\"behavior\\\">\\n    </mat-progress-spinner>\\n  </ng-template>\\n</mat-card>\\n</div>\"","module.exports = \".example-container {\\n  display: flex;\\n  flex-direction: column;\\n  max-height: 500px;\\n  min-width: 300px; }\\n\\n.mat-table {\\n  overflow: auto;\\n  max-height: 500px; }\\n\\n.material {\\n  font-family: cursive; }\\n\\n.material.mat-paginator {\\n  font-style: italic; }\\n\\n.material.mat-header-cell {\\n  font-weight: bold;\\n  font-size: medium;\\n  color: #3F51B5; }\\n\"","import { SectionFormComponent } from './../section-form/section-form.component';\nimport { MatTableDataSource, PageEvent, MatDialog, MatSnackBar, MatChip } from '@angular/material';\n\nimport { Component, OnInit } from '@angular/core';\n\nimport { Station } from '../../models/Station';\n\nimport { StationService } from '../../services/station.service';\nimport { AppError } from '../../../common/app-error';\nimport { NoConnectionError } from '../../../common/no-connection-error';\nimport { StationFormComponent } from '../station-form/station-form.component';\n\n\n\n@Component({\n  selector: 'app-station-list',\n  templateUrl: './station-list.component.html',\n  styleUrls: ['./station-list.component.scss']\n})\n\nexport class StationListComponent implements OnInit {\n  // model\n  station: Station;\n  stations: Station[];\n  // mat-table\n  displayedColumns = ['StationNumber','SchoolId','Station','Edit','Delete'];\n  dataSource: MatTableDataSource<Station>;\n  pageSize = 10;\n  pageSizeOptions = [5, 10, 25, 50, 100];\n  length: number;\n  pageEvent: PageEvent;\n  // loading\n  behavior = 'indeterminate';\n  constructor(private stationService: StationService,\n    private dialog: MatDialog,\n    private snackBar: MatSnackBar) { }\n\n  ngOnInit() {\n    this.loadRecords(1, this.pageSize);\n  }\n  onPaginateChange($event) {\n    this.loadRecords(this.pageEvent.pageIndex + 1, this.pageEvent.pageSize);\n  }\n\n  loadRecords(pageIndex, pageSize) {\n    this.stationService.get(pageIndex, pageSize)\n      .subscribe(response => {\n        this.stations = response.json().stations;\n        this.length = response.json().count;\n        this.dataSource = new MatTableDataSource<Station>(this.stations);\n      },\n      (error: AppError) => {\n        if (error instanceof NoConnectionError) {\n          this.snackBar.open('Loading Failed' , 'No Connection', {\n            duration: 2000,\n          }\n        );\n        this.behavior = 'determinate';\n        }}\n    );\n  }\n\n  AddStationFormDialog() {\n    const dialogRef = this.dialog.open(StationFormComponent, {\n      width: '450px'\n    });\n    dialogRef.componentInstance.station = new Station();\n    dialogRef.afterClosed().subscribe(result => { this.ngOnInit(); });\n\n  }\n\n  EditStationFormDialog(stationPassed) {\n    const dialogRef = this.dialog.open(StationFormComponent, { width: '450px'});\n    dialogRef.componentInstance.station = new Station();\n    dialogRef.componentInstance.station.Id = stationPassed.id;\n    dialogRef.componentInstance.station.Name = stationPassed.name;\n    dialogRef.componentInstance.station.SchoolId = stationPassed.schoolId;\n    dialogRef.componentInstance.station.StationNumber = stationPassed.stationNumber;\n    dialogRef.componentInstance.heading = \"Edit Station\";\n    dialogRef.afterClosed().subscribe(result => { this.ngOnInit(); });\n  }\n\n}\n","module.exports = \"<p>\\n  student-form works!\\n</p>\\n\\n{{ studentFormGroup.value | json }}\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\nimport { Student } from '../../models/student';\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { MatDialogRef, MatSnackBar } from '@angular/material';\nimport { StudentService } from '../../services/student.service';\nimport { Person } from '../../models/person';\nimport { Guardian } from '../../models/guardian';\nimport { StudentAddress } from '../../models/studentAddress';\n\n@Component({\n  selector: 'app-student-form',\n  templateUrl: './student-form.component.html',\n  styleUrls: ['./student-form.component.scss']\n})\nexport class StudentFormComponent implements OnInit {\n\n  studentFormGroup: FormGroup;\n  studentAddress: FormGroup;\n\n  student: Student;\n  heading: string = 'New Student';\n\n  constructor(\n    private fb: FormBuilder,\n    private studentService: StudentService,\n    public snackBar: MatSnackBar) { }\n\n  ngOnInit() {\n    // prevent error of type undefined\n    this.student.Person = new Person();\n    this.student.Guardian = new Guardian();\n    this.student.Guardian.Person = new Person();\n\n\n    this.studentFormGroup = this.fb.group({\n      id: new FormControl(this.student.Id),\n      lrnNumber: new FormControl(this.student.LrnNumber, [Validators.required]),\n      person: this.fb.group({\n        firstName: new FormControl(this.student.Person.firstName, [Validators.required]),\n        middleName: new FormControl(this.student.Person.middleName, [Validators.required]),\n        lastName: new FormControl(this.student.Person.lastName, [Validators.required]),\n        suffixName: new FormControl(this.student.Person.suffixName)\n      }),\n      genderId: new FormControl(this.student.GenderId, [Validators.required]),\n      contact: new FormControl(this.student.Contact),\n      birthDate: new FormControl(this.student.BirthDate, [Validators.required]),\n      studentAddresses: this.fb.array([\n        this.studentAddress = this.fb.group({\n          barangayId: new FormControl('' , [Validators.required]),\n          municipalityId: new FormControl('', [Validators.required]),\n          provinceId: new FormControl('', [Validators.required])\n        })\n      ]),\n      guardian: this.fb.group({\n        person: this.fb.group({\n          title: new FormControl(this.student.Person.title),\n          firstName: new FormControl(this.student.Person.firstName, [Validators.required]),\n          middleName: new FormControl(this.student.Person.middleName, [Validators.required]),\n          lastName: new FormControl(this.student.Person.lastName, [Validators.required]),\n          suffixName: new FormControl(this.student.Person.suffixName)          \n        }),\n        contact: new FormControl(this.student.Guardian.Contact, [Validators.required]),\n        relationId: new FormControl(this.student.Guardian.Contact, [Validators.required])\n      })\n\n    });\n  }\n\n}\n","module.exports = \"<div class=\\\"material\\\">\\r\\n    <mat-card>\\r\\n      <div *ngIf=\\\"students else loading\\\" class=\\\"material\\\">\\r\\n        \\r\\n          <h3>List of Students</h3>\\r\\n          <mat-divider></mat-divider>\\r\\n        \\r\\n          <br>\\r\\n          <br>\\r\\n        <button mat-raised-button color=\\\"primary\\\" (click)=\\\"AddStudentFormDialog()\\\" class=\\\"material\\\">\\r\\n          Add Student\\r\\n        </button>\\r\\n    \\r\\n        <br>\\r\\n        <br>\\r\\n        <mat-divider></mat-divider>\\r\\n        <div class=\\\"example-container mat-elevation-z8\\\" class=\\\"material\\\">\\r\\n          <mat-table #table [dataSource]=\\\"dataSource\\\">\\r\\n\\r\\n            <ng-container matColumnDef=\\\"LrnNumber\\\">\\r\\n              <mat-header-cell *matHeaderCellDef class=\\\"material\\\"> Lrn </mat-header-cell>\\r\\n              <mat-cell *matCellDef=\\\"let student\\\" class=\\\"material\\\"> {{ student.lrnNumber }} </mat-cell>\\r\\n            </ng-container>\\r\\n\\r\\n            <ng-container matColumnDef=\\\"Name\\\">\\r\\n              <mat-header-cell *matHeaderCellDef class=\\\"material\\\"> Name </mat-header-cell>\\r\\n              <mat-cell *matCellDef=\\\"let student\\\" class=\\\"material\\\"> {{ student.person.firstName }}  {{ student.person.lastName }}</mat-cell>\\r\\n            </ng-container>\\r\\n  \\r\\n            <ng-container matColumnDef=\\\"edit\\\">\\r\\n              <mat-header-cell *matHeaderCellDef class=\\\"material\\\"> Edit </mat-header-cell>\\r\\n              <mat-cell *matCellDef=\\\"let student\\\">\\r\\n                <a mat-button (click)=\\\"EditSectionFormDialog(section)\\\">\\r\\n                  <mat-icon color=\\\"primary\\\">edit</mat-icon>\\r\\n                </a>\\r\\n              </mat-cell>\\r\\n            </ng-container>\\r\\n\\r\\n            <ng-container matColumnDef=\\\"Gender\\\">\\r\\n              <mat-header-cell *matHeaderCellDef class=\\\"material\\\"> Gender </mat-header-cell>\\r\\n              <mat-cell *matCellDef=\\\"let student\\\" class=\\\"material\\\"> {{ student.gender.name }} </mat-cell>\\r\\n            </ng-container>\\r\\n  \\r\\n            <ng-container matColumnDef=\\\"BirthDate\\\">\\r\\n              <mat-header-cell *matHeaderCellDef class=\\\"material\\\"> BirthDate </mat-header-cell>\\r\\n              <mat-cell *matCellDef=\\\"let student\\\" class=\\\"material\\\"> {{ student.birthDate | date }}   </mat-cell>\\r\\n            </ng-container>\\r\\n\\r\\n            <ng-container matColumnDef=\\\"delete\\\">\\r\\n              <mat-header-cell *matHeaderCellDef class=\\\"material\\\"> Delete </mat-header-cell>\\r\\n              <mat-cell *matCellDef=\\\"let section\\\">\\r\\n                <a mat-button (click)=\\\"EditSectionFormDialog(section)\\\">\\r\\n                  <mat-icon color=\\\"warn\\\">delete </mat-icon>\\r\\n                </a>\\r\\n              </mat-cell>\\r\\n            </ng-container>\\r\\n  \\r\\n            <mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></mat-header-row>\\r\\n            <mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></mat-row>\\r\\n  \\r\\n          </mat-table>\\r\\n  \\r\\n          <mat-paginator class=\\\"material\\\" [length]=\\\"length\\\" [pageSize]=\\\"pageSize\\\" [pageSizeOptions]=\\\"pageSizeOptions\\\" [pageIndex]=\\\"pageIndex\\\"\\r\\n            (page)=\\\"pageEvent = $event; onPaginateChange($event)\\\">\\r\\n          </mat-paginator>\\r\\n  \\r\\n        </div>\\r\\n      </div>\\r\\n    </mat-card>\\r\\n    <ng-template #loading>\\r\\n      <mat-progress-spinner style=\\\"margin:0 auto;\\\" [mode]=\\\"behavior\\\">\\r\\n      </mat-progress-spinner>\\r\\n    </ng-template>\\r\\n  </div>\\r\\n  \"","module.exports = \".example-container {\\n  display: flex;\\n  flex-direction: column;\\n  max-height: 500px;\\n  min-width: 300px; }\\n\\n.mat-table {\\n  overflow: auto;\\n  max-height: 500px; }\\n\\n.material {\\n  font-family: cursive; }\\n\\n.material h1, h2, h3, h4, h5 {\\n  text-align: center;\\n  color: purple; }\\n\\n.material.mat-paginator {\\n  font-style: italic; }\\n\\n.material.mat-header-cell {\\n  font-weight: bold;\\n  font-size: medium;\\n  color: #3F51B5; }\\n\"","\nimport { MatTableDataSource, PageEvent, MatDialog, MatSnackBar, MatChip } from '@angular/material';\n\nimport { Pipe, PipeTransform, Component, OnInit } from '@angular/core';\n\nimport { AppError } from '../../../common/app-error';\nimport { NoConnectionError } from '../../../common/no-connection-error';\n\nimport { Student } from '../../models/student';\nimport { StudentService } from '../../services/student.service';\nimport { StudentFormComponent } from '../student-form/student-form.component';\n\n\n@Component({\n  selector: 'app-student-list',\n  templateUrl: './student-list.component.html',\n  styleUrls: ['./student-list.component.scss']\n})\nexport class StudentListComponent implements OnInit {\n  // model\n  student: Student;\n  students: Student[];\n  // mat-table\n  displayedColumns = ['LrnNumber','Name','Gender','BirthDate'];\n  dataSource: MatTableDataSource<Student>;\n  pageSize = 10;\n  pageSizeOptions = [5, 10, 25, 50, 100];\n  length: number;\n  pageEvent: PageEvent;\n  // loading\n  behavior = 'indeterminate';\n  constructor(private studentService: StudentService,\n    private dialog: MatDialog,\n    private snackBar: MatSnackBar) { }\n\n  ngOnInit() {\n    this.loadRecords(1, this.pageSize);\n  }\n  onPaginateChange($event) {\n    this.loadRecords(this.pageEvent.pageIndex + 1, this.pageEvent.pageSize);\n  }\n\n  loadRecords(pageIndex, pageSize) {\n    this.studentService.get(pageIndex, pageSize)\n      .subscribe(response => {\n        this.students = response.json().students;\n        this.length = response.json().count;\n        this.dataSource = new MatTableDataSource<Student>(this.students);\n      },\n      (error: AppError) => {\n        if (error instanceof NoConnectionError) {\n          this.snackBar.open('Loading Failed' , 'No Connection', {\n            duration: 2000,\n          }\n        );\n        this.behavior = 'determinate';\n        }}\n    );\n  }\n\n  AddStudentFormDialog() {\n    const dialogRef = this.dialog.open(StudentFormComponent, {\n      width: '800px'\n    });\n    dialogRef.componentInstance.student = new Student();\n    dialogRef.afterClosed().subscribe(result => { this.ngOnInit(); });\n\n  }\n\n}\n","module.exports = \"<mat-toolbar color=\\\"primary\\\" class=\\\"material\\\">\\n  <button mat-button class=\\\"sidenav-toggle\\\" (click)=\\\"toggleSidenav.emit()\\\">\\n    <mat-icon [hidden] *ngIf=\\\"authService.isLoggedIn()\\\">menu</mat-icon>\\n  </button>\\n  \\n  <span class=\\\"example-spacer\\\"></span>\\n   <span>Welcome {{ name }}!</span>\\n  \\n  <button mat-button [matMenuTriggerFor]=\\\"menu\\\">\\n      <mat-icon>more_vert</mat-icon>\\n  </button>\\n  <mat-menu #menu=\\\"matMenu\\\"> \\n    <button mat-menu-item (click)=\\\"openLoginForm()\\\" *ngIf=\\\"!authService.isLoggedIn()\\\" class=\\\"material\\\">Login Account</button>\\n    <button mat-menu-item (click)=\\\"openRegistrationForm()\\\" *ngIf=\\\"authService.isLoggedIn() && authService.decodedToken.Role=='Administrator'\\\" class=\\\"material\\\">New User</button> \\n    <button mat-menu-item (click)=\\\"authService.logout(); \\\" *ngIf=\\\"authService.isLoggedIn()\\\" [routerLink]=\\\"['/quonmanager']\\\" class=\\\"material\\\">Logout</button>\\n  </mat-menu>\\n</mat-toolbar>\\n\\n\\n\"","module.exports = \".example-spacer {\\n  flex: 1 1 auto; }\\n\\n.sidenav-toggle {\\n  display: none;\\n  padding: 0;\\n  margin: 8px;\\n  min-width: 56px; }\\n\\n@media (max-width: 720px) {\\n    .sidenav-toggle {\\n      display: flex;\\n      align-items: center;\\n      justify-content: center; } }\\n\\n.sidenav-toggle mat-icon {\\n    font-size: 30px;\\n    height: 56px;\\n    width: 56px;\\n    line-height: 56px;\\n    color: white; }\\n\\n.material {\\n  font-family: cursive; }\\n\\nmain {\\n  overflow-y: auto; }\\n\"","import { AuthService } from './../../services/auth.service';\nimport { RegistrationFormComponent } from './../registration-form/registration-form.component';\nimport { MatDialog } from '@angular/material';\nimport { Component, OnInit, EventEmitter, Output } from '@angular/core';\nimport { LoginFormComponent } from '../login-form/login-form.component';\n\n@Component({\n  selector: 'app-toolbar',\n  templateUrl: './toolbar.component.html',\n  styleUrls: ['./toolbar.component.scss']\n})\nexport class ToolbarComponent implements OnInit {\n\n  @Output() toggleSidenav = new EventEmitter<void>();\n\n  constructor(private dialog: MatDialog,\n    public authService: AuthService) { }\n\n  ngOnInit() { }\n\n  get stationid() { \n    if (!this.authService.isLoggedIn()) {\n      return 'Guest';\n    } else return this.authService.decodedToken.StationId;\n  }\n\n  get station() { \n    if (!this.authService.isLoggedIn()) {\n      return 'Guest';\n    } else return this.authService.decodedToken.Station;\n  }\n  get name() { \n    if (!this.authService.isLoggedIn()) {\n      return 'Guest';\n    } else return this.authService.decodedToken.given_name;\n  }\n\n  get role() {\n    if (!this.authService.isLoggedIn()) {\n      return '';\n    } else return this.authService.decodedToken.Role;   \n  }\n\n  openLoginForm() {\n    this.dialog.open(LoginFormComponent, {\n      width: '450px'\n    });\n  }\n\n  openRegistrationForm() {\n    this.dialog.open(RegistrationFormComponent, {\n      width: '450px'\n    });\n  }\n}\n","module.exports = \"<div *ngIf=\\\"sourceMemos else loading\\\">\\r\\n\\r\\n    <mat-toolbar color=\\\"primary\\\">\\r\\n        <mat-icon style=\\\"padding-right:15em\\\">group_add</mat-icon>\\r\\n        New Training\\r\\n    </mat-toolbar>\\r\\n\\r\\n    <br>\\r\\n    <br>\\r\\n\\r\\n    <form [formGroup]=\\\"trainingFormGroup\\\">\\r\\n        <mat-dialog-content>\\r\\n\\r\\n            <mat-accordion>\\r\\n                <mat-expansion-panel [expanded]=\\\"panelOpenState\\\">\\r\\n                    <mat-expansion-panel-header>\\r\\n                        <mat-panel-title>\\r\\n                            Training Information\\r\\n                        </mat-panel-title>\\r\\n                        <mat-panel-description>\\r\\n                            Enter Training Information\\r\\n                        </mat-panel-description>\\r\\n                    </mat-expansion-panel-header>\\r\\n\\r\\n                    <div class=\\\"example-container\\\">\\r\\n\\r\\n                        <mat-form-field hintLabel=\\\"Select Year\\\">\\r\\n                            <mat-select placeholder=\\\"Source Memo\\\" formControlName=\\\"sourceMemoId\\\" required>\\r\\n                                <mat-option *ngFor=\\\"let sourceMemo of sourceMemos\\\" [value]=\\\"sourceMemo.id\\\">{{ sourceMemo.name}}</mat-option>\\r\\n                            </mat-select>\\r\\n                        </mat-form-field>\\r\\n\\r\\n                        <mat-form-field hintLabel=\\\"Select Year\\\">\\r\\n                            <mat-select placeholder=\\\"Year\\\" formControlName=\\\"year\\\" required>\\r\\n                                <mat-option [value]=2018>2018</mat-option>\\r\\n                                <mat-option [value]=2018>2019</mat-option>\\r\\n                                <mat-option [value]=2018>2020</mat-option>\\r\\n                            </mat-select>\\r\\n                        </mat-form-field>\\r\\n\\r\\n                        <mat-form-field hintLabel=\\\"minimum 3 digits\\\">\\r\\n                            <input matInput placeholder=\\\"Memo Number\\\" formControlName=\\\"number\\\" required maxlength=\\\"7\\\" minlength=\\\"3\\\" pattern=\\\"[0-9]+\\\">\\r\\n                            <mat-error *ngIf=\\\"trainingFormGroup.get('number').invalid\\\">{{getErrorMessage('number')}}</mat-error>\\r\\n                            <mat-hint align=\\\"end\\\">{{trainingFormGroup.get('number').value?.length || 0}}/3</mat-hint>\\r\\n                        </mat-form-field>\\r\\n\\r\\n                        <mat-form-field hintLabel=\\\"Minimum 15 characters\\\">\\r\\n                            <input matInput placeholder=\\\"Seminar / Training\\\" formControlName=\\\"title\\\" required minlength=\\\"15\\\" pattern=\\\"[a-zA-Z][a-zA-Z ]+\\\">\\r\\n                            <mat-error *ngIf=\\\"trainingFormGroup.get('title').invalid\\\">{{getErrorMessage('title')}}</mat-error>\\r\\n                            <mat-hint align=\\\"end\\\">{{trainingFormGroup.get('title').value?.length || 0}}/15</mat-hint>\\r\\n                        </mat-form-field>\\r\\n                        <mat-form-field hintLabel=\\\"Minimum 15 characters\\\">\\r\\n                            <input matInput placeholder=\\\"Relative Expenses\\\" formControlName=\\\"relativeExpenses\\\" required minlength=\\\"15\\\" pattern=\\\"[a-zA-Z][a-zA-Z ]+\\\">\\r\\n                            <mat-error *ngIf=\\\"trainingFormGroup.get('relativeExpenses').invalid\\\">{{getErrorMessage('relativeExpenses')}}</mat-error>\\r\\n                            <mat-hint align=\\\"end\\\">{{trainingFormGroup.get('relativeExpenses').value?.length || 0}}/15</mat-hint>\\r\\n                        </mat-form-field>\\r\\n\\r\\n                        <br>\\r\\n                        <mat-divider></mat-divider>\\r\\n                        <br>\\r\\n                    </div>\\r\\n\\r\\n                    <br>\\r\\n                    <mat-divider></mat-divider>\\r\\n                    <br>\\r\\n                </mat-expansion-panel>\\r\\n            </mat-accordion>\\r\\n            <br>\\r\\n            <mat-accordion>\\r\\n                <mat-expansion-panel [expanded]=\\\"panelOpenState\\\">\\r\\n                    <mat-expansion-panel-header>\\r\\n                        <mat-panel-title>\\r\\n                            Training Dates\\r\\n                        </mat-panel-title>\\r\\n                        <mat-panel-description>\\r\\n                            Enter Dates\\r\\n                        </mat-panel-description>\\r\\n                    </mat-expansion-panel-header>\\r\\n                    <br>\\r\\n                    <button mat-raised-button color=\\\"primary\\\" color=\\\"primary\\\" [disabled]=\\\"!trainingDates.valid\\\" (click)=\\\"addTrainingDate()\\\">New Date</button>\\r\\n                    <br>\\r\\n                    <br>\\r\\n                    <div class=\\\"example-container\\\" formArrayName=\\\"trainingDates\\\" *ngFor=\\\"let trainingDate of trainingFormGroup.get('trainingDates').controls; let i=index;\\\">\\r\\n\\r\\n                        <div class=\\\"example-container\\\" [formGroupName]=\\\"i\\\">\\r\\n\\r\\n                            <mat-form-field>\\r\\n                                <input matInput [matDatepicker]=\\\"date\\\" placeholder=\\\"Date\\\" formControlName=\\\"date\\\" required>\\r\\n                                <mat-datepicker-toggle matSuffix [for]=\\\"date\\\"></mat-datepicker-toggle>\\r\\n                                <mat-datepicker #date></mat-datepicker>\\r\\n                            </mat-form-field>\\r\\n\\r\\n                            <br>\\r\\n                            <mat-divider></mat-divider>\\r\\n                            <a mat-button [disabled]=\\\"!trainingDates.valid\\\" (click)=\\\"deleteTrainingDate(i)\\\">\\r\\n                                <mat-icon color=\\\"warn\\\">delete </mat-icon>Delete Date</a>\\r\\n                            <mat-divider></mat-divider>\\r\\n                            <br>\\r\\n                        </div>\\r\\n                    </div>\\r\\n\\r\\n                </mat-expansion-panel>\\r\\n            </mat-accordion>\\r\\n            <br>\\r\\n            <mat-accordion>\\r\\n                <mat-expansion-panel [expanded]=\\\"panelOpenState\\\">\\r\\n                    <mat-expansion-panel-header>\\r\\n                        <mat-panel-title>\\r\\n                            Training Venue\\r\\n                        </mat-panel-title>\\r\\n                        <mat-panel-description>\\r\\n                            Enter Venue\\r\\n                        </mat-panel-description>\\r\\n                    </mat-expansion-panel-header>\\r\\n                    <br>\\r\\n                    <button mat-raised-button color=\\\"primary\\\" color=\\\"primary\\\" [disabled]=\\\"!trainingVenues.valid\\\" (click)=\\\"addTrainingVenue()\\\">New Venue</button>\\r\\n                    <br>\\r\\n                    <br>\\r\\n                    <div class=\\\"example-container\\\" formArrayName=\\\"trainingVenues\\\" *ngFor=\\\"let trainingVenue of trainingFormGroup.get('trainingVenues').controls; let i=index;\\\">\\r\\n\\r\\n                        <div class=\\\"example-container\\\" [formGroupName]=\\\"i\\\">\\r\\n\\r\\n                            <mat-form-field hintLabel=\\\"Minimum 5 characters\\\">\\r\\n                                <input matInput placeholder=\\\"Venue\\\" formControlName=\\\"venue\\\" required minlength=\\\"5\\\" pattern=\\\"[a-zA-Z][a-zA-Z ]+\\\">\\r\\n                            </mat-form-field>\\r\\n                            <br>\\r\\n                            <mat-divider></mat-divider>\\r\\n                            <a mat-button [disabled]=\\\"!trainingVenues.valid\\\" (click)=\\\"deleteTrainingVenue(i)\\\">\\r\\n                                <mat-icon color=\\\"warn\\\">delete </mat-icon>Delete Venue</a>\\r\\n                            <mat-divider></mat-divider>\\r\\n                            <br>\\r\\n                        </div>\\r\\n                    </div>\\r\\n\\r\\n                </mat-expansion-panel>\\r\\n\\r\\n            </mat-accordion>\\r\\n            <br>\\r\\n            <mat-accordion>\\r\\n                <mat-expansion-panel [expanded]=\\\"panelOpenState\\\">\\r\\n                    <mat-expansion-panel-header>\\r\\n                        <mat-panel-title>\\r\\n                            Training Speaker\\r\\n                        </mat-panel-title>\\r\\n                        <mat-panel-description>\\r\\n                            Enter Speaker\\r\\n                        </mat-panel-description>\\r\\n                    </mat-expansion-panel-header>\\r\\n                    <br>\\r\\n                    <button mat-raised-button color=\\\"primary\\\" color=\\\"primary\\\" [disabled]=\\\"!trainingSpeakers.valid\\\" (click)=\\\"addTrainingSpeaker()\\\">New Speaker</button>\\r\\n                    <br>\\r\\n                    <br>\\r\\n                    <div class=\\\"example-container\\\" formArrayName=\\\"trainingSpeakers\\\" *ngFor=\\\"let trainingSpeaker of trainingFormGroup.get('trainingSpeakers').controls; let i=index;\\\">\\r\\n\\r\\n                        <div class=\\\"example-container\\\" [formGroupName]=\\\"i\\\">\\r\\n\\r\\n\\r\\n                            <mat-form-field hintLabel=\\\"Select Speaker\\\">\\r\\n                                <mat-select placeholder=\\\"Speaker\\\" formControlName=\\\"speakerId\\\" required>\\r\\n                                    <mat-option *ngFor=\\\"let speaker of speakers\\\" [value]=\\\"speaker.id\\\">{{ speaker.title}} {{ speaker.firstName}} {{ speaker.middleName}} {{ speaker.lastName}}\\r\\n                                        {{ speaker.suffixName }}</mat-option>\\r\\n                                </mat-select>\\r\\n                            </mat-form-field>\\r\\n\\r\\n                            <mat-form-field hintLabel=\\\"Minimum 15 characters\\\">\\r\\n                                <input matInput placeholder=\\\"Topic\\\" formControlName=\\\"topic\\\" required minlength=\\\"15\\\" pattern=\\\"[a-zA-Z][a-zA-Z ]+\\\">\\r\\n                            </mat-form-field>\\r\\n                            <br>\\r\\n                            <mat-divider></mat-divider>\\r\\n                            <a mat-button [disabled]=\\\"!trainingSpeakers.valid\\\" (click)=\\\"deleteTrainingSpeaker(i)\\\">\\r\\n                                <mat-icon color=\\\"warn\\\">delete </mat-icon>Delete Speaker</a>\\r\\n                            <mat-divider></mat-divider>\\r\\n                            <br>\\r\\n                        </div>\\r\\n                    </div>\\r\\n\\r\\n                </mat-expansion-panel>\\r\\n\\r\\n            </mat-accordion>\\r\\n\\r\\n        </mat-dialog-content>\\r\\n    </form>\\r\\n    <br>\\r\\n    <br>\\r\\n    <mat-dialog-actions>\\r\\n        <button mat-raised-button color=\\\"primary\\\" color=\\\"primary\\\" [disabled]=\\\"!trainingFormGroup.valid\\\" (click)=\\\"create()\\\">\\r\\n            <mat-icon>save</mat-icon> Save\\r\\n        </button>\\r\\n        <button mat-raised-button color=\\\"primary\\\" (click)=\\\"redirectToList()\\\">\\r\\n            <mat-icon>cancel</mat-icon> Cancel\\r\\n        </button>\\r\\n    </mat-dialog-actions>\\r\\n</div>\\r\\n\\r\\n<ng-template #loading>\\r\\n    <mat-spinner style=\\\"margin:0 auto;\\\" mode=\\\"indeterminate\\\"></mat-spinner>\\r\\n</ng-template>\\r\\n\\r\\n\"","module.exports = \".example-container {\\n  display: flex;\\n  flex-direction: column; }\\n\\n.example-container > * {\\n  width: 100%; }\\n\"","import { Speaker } from './../../models/Speaker';\nimport { BadRequestError } from './../../../common/bad-request-error';\nimport { forEach } from '@angular/router/src/utils/collection';\nimport { NoConnectionError } from './../../../common/no-connection-error';\nimport { AppError } from './../../../common/app-error';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { MatSnackBar } from '@angular/material';\nimport { TrainingService } from './../../services/training.service';\nimport { FormGroup, FormBuilder, FormControl, Validators, FormArray } from '@angular/forms';\n\nimport { Component, OnInit } from '@angular/core';\nimport { Training } from '../../models/training';\nimport { SourceMemo } from '../../models/sourceMemo';\n\n@Component({\n  selector: 'app-training-form',\n  templateUrl: './training-form.component.html',\n  styleUrls: ['./training-form.component.scss']\n})\nexport class TrainingFormComponent implements OnInit {\n  id: string;\n  training: Training;\n  sourceMemos: SourceMemo[];\n  speakers: Speaker[];\n\n  trainingFormGroup: FormGroup;\n  panelOpenState = true;\n\n  get trainingDates(): FormArray {\n    return <FormArray>this.trainingFormGroup.get('trainingDates');\n  }\n\n  get trainingVenues(): FormArray {\n    return <FormArray>this.trainingFormGroup.get('trainingVenues');\n  }\n\n  get trainingSpeakers(): FormArray {\n    return <FormArray>this.trainingFormGroup.get('trainingSpeakers');\n  }\n\n\n  constructor(private fb: FormBuilder,\n    private trainingService: TrainingService,\n    private snackBar: MatSnackBar,\n    private router: Router,\n    private route: ActivatedRoute) {\n      this.route.params.subscribe(params => this.id = params['id']);\n     }\n\n  ngOnInit() {\n    this.createFormGroup();\n    this.populateSourceMemo();\n    this.populateSpeaker();\n\n    if (this.id != null) {\n      this.trainingService.getById(this.id)\n        .subscribe(response => {\n          this.training = response.json();\n          this.populateForm();\n        }, (error: AppError) => {\n          if (error instanceof NoConnectionError) {\n            this.snackBar.open('Loading Failed', 'No Connection', {\n              duration: 2000,\n            });\n          }\n        });\n    }   \n\n  }\n\n  createFormGroup(): void {\n    this.training = new Training();\n\n    this.trainingFormGroup = this.fb.group({\n      id: new FormControl(this.training.id),\n      title: new FormControl(this.training.title, [Validators.required, Validators.minLength(15)]),\n      sourceMemoId: new FormControl(this.training.sourceMemoId, [ Validators.required]),\n      year: new FormControl(this.training.year, [Validators.required]),\n      number: new FormControl(this.training.number, [Validators.required]),\n      relativeExpenses: new FormControl(this.training.relativeExpenses, [Validators.required, Validators.minLength(3)]),\n      trainingDates: this.fb.array([this.createTrainingDate()]),\n      trainingVenues: this.fb.array([this.createTrainingVenue()]),\n      trainingSpeakers: this.fb.array([this.createTrainingSpeaker()])\n\n    });\n\n  }\n\n  createTrainingDate(): FormGroup {\n    return this.fb.group({\n      id: 0,\n      trainingId: new FormControl(this.training.id),\n      date: new FormControl('', [Validators.required])\n    });\n  }\n\n  createTrainingVenue(): FormGroup {\n    return this.fb.group({\n      id: 0,\n      trainingId: new FormControl(this.training.id),\n      venue: new FormControl('', [Validators.required])\n    });\n  }\n\n  createTrainingSpeaker(): FormGroup {\n    return this.fb.group({\n      id: 0,\n      trainingId: new FormControl(this.training.id),\n      speakerId: new FormControl('', [Validators.required]),\n      topic: new FormControl('', [Validators.required])\n    });\n  }\n\n  addTrainingDate(): void {\n    this.trainingDates.push(this.createTrainingDate());   \n  }\n\n  addTrainingVenue(): void {\n    this.trainingVenues.push(this.createTrainingVenue());\n  }\n\n  addTrainingSpeaker(): void {\n    this.trainingSpeakers.push(this.createTrainingSpeaker());\n  }\n\n  deleteTrainingDate(index: number): void {\n    this.trainingDates.removeAt(index);\n  }\n\n  deleteTrainingVenue(index: number): void {\n    this.trainingVenues.removeAt(index);\n  }\n\n  deleteTrainingSpeaker(index: number): void {\n    this.trainingSpeakers.removeAt(index);\n  }\n  \n  populateSourceMemo(): void {\n    const urlSourceMemos = this.trainingService.sourceMemos;\n    this.trainingService.getByUrl(urlSourceMemos)\n      .subscribe(response => {\n        this.sourceMemos = response.json().sourceMemos;\n      }, (error: AppError) => {\n        if (error instanceof NoConnectionError) {\n          this.snackBar.open('Loading Failed', 'No Connection', {\n            duration: 2000,\n          });\n        }\n      });\n  }\n\n  populateSpeaker(): void {\n    const urlSpeakers = this.trainingService.speakers;\n    this.trainingService.getByUrl(urlSpeakers)\n      .subscribe(response => {\n        this.speakers = response.json().speakers;\n      }, (error: AppError) => {\n        if (error instanceof NoConnectionError) {\n          this.snackBar.open('Loading Failed', 'No Connection', {\n            duration: 2000,\n          });\n        }\n      });\n  }\n\n  populateForm(): void {\n    this.trainingFormGroup.patchValue({\n      id: this.training.id,\n      title: this.training.title,\n      sourceMemoId: this.training.sourceMemoId,\n      year: this.training.year,\n      number: this.training.number,\n      relativeExpenses: this.training.relativeExpenses\n    });\n\n    this.trainingDates.removeAt(0);\n    this.trainingVenues.removeAt(0);\n    this.trainingSpeakers.removeAt(0);\n\n    this.training.trainingDates.forEach(element => {\n      const trainingDate = this.createTrainingDate();\n      trainingDate.patchValue(element);\n      this.trainingDates.push(trainingDate);\n    });\n\n    this.training.trainingSpeakers.forEach(element => {\n      const trainingSpeaker = this.createTrainingSpeaker();\n      trainingSpeaker.patchValue(element);\n      this.trainingSpeakers.push(trainingSpeaker);\n    });\n\n    this.training.trainingVenues.forEach(element => {\n      const trainingVenue = this.createTrainingVenue();\n      trainingVenue.patchValue(element);\n      this.trainingVenues.push(trainingVenue);\n    });\n\n  }\n\n  create() {\n  // convert all date inputs | bug in matDatePicker\n  this.convertDateInputs();\n  // check the employee.id if has value if it is for creating or updating    \n  if (this.training.id == null) { \n    // disable ids that are unneccessary \n    this.disableIdsinForm();\n    this.trainingService.create(this.trainingFormGroup.value)\n    .subscribe(response => {\n      this.snackBar.open('Successful!', 'training Created', {\n        duration: 2000,\n      });\n      this.redirectToList();\n    },\n      (error: AppError) => {\n        if (error instanceof BadRequestError) {\n          this.trainingFormGroup.setErrors(['BadRequest']);\n          this.snackBar.open('Bad Request!', 'training not Created', {\n            duration: 2000,\n          });\n        } else {\n          this.snackBar.open('Unknown Error!', 'training not Created', {\n            duration: 2000,\n          });\n        }\n      }\n    );\n  }\n  // tslint:disable-next-line:one-line\n  else {\n    this.trainingService.update(this.trainingFormGroup.value)\n    .subscribe(response => {\n      this.snackBar.open('Successful!', 'training Updated', {\n        duration: 2000,\n      });\n      this.redirectToList();\n    },\n      (error: AppError) => {\n        if (error instanceof BadRequestError) {\n          this.trainingFormGroup.setErrors(['BadRequest']);\n          this.snackBar.open('Bad Request!', 'training not Updated', {\n            duration: 2000,\n          });\n        } else {\n          this.snackBar.open('Unknown Error!', 'training not Updated', {\n            duration: 2000,\n          });\n        }\n      }\n    );    \n  }\n\n  }\n\n  // matDatapicker bug solution\n  convertDateInputs(): void {\n    for (let index = 0; index < this.trainingDates.length; index++) {\n      const trainingDate = new Date(this.trainingDates.at(index).get('date').value);\n      // Date\n      const convertedDate = this.convertDate(trainingDate);\n      this.trainingDates.at(index).get('date').setValue(convertedDate);\n    }\n\n  }\n  // convert date to current date\n  convertDate(dateToConvert: Date): Date {\n    const convertedDate = dateToConvert.setMinutes((dateToConvert.getTimezoneOffset() * -1));\n    return new Date(convertedDate);\n  }\n\n  // disable ids in form for creating\n  disableIdsinForm(): void {\n    this.trainingFormGroup.get('id').disable();\n\n    for (let index = 0; index < this.trainingDates.length; index++) {\n          this.trainingDates.at(index).get('id').disable();\n          this.trainingDates.at(index).get('trainingId').disable();\n    }\n    // loop and disable the ids in employeeStations\n    for (let index = 0; index < this.trainingSpeakers.length; index++) {\n      this.trainingSpeakers.at(index).get('id').disable();\n      this.trainingSpeakers.at(index).get('trainingId').disable();\n    }\n\n    for (let index = 0; index < this.trainingVenues.length; index++) {\n      this.trainingVenues.at(index).get('id').disable();\n      this.trainingVenues.at(index).get('trainingId').disable();\n    }\n  }\n  // back to employee-list\n  redirectToList(): void {\n    this.router.navigate(['/quonmanager/training-list']);\n  }\n\n\n  getErrorMessage(controlName: string): string {\n      return this.trainingFormGroup.get(controlName).hasError('required') ? 'You must enter or select a value' :\n        this.trainingFormGroup.get(controlName).hasError('minlength') ? 'You must enter atleast 15 characters' :\n            '';\n  }\n}\n","module.exports = \"<div class=\\\"material\\\">\\n  <mat-card>\\n    <div *ngIf=\\\"trainings else loading\\\">\\n      <button mat-raised-button color=\\\"primary\\\" [routerLink]=\\\"['/quonmanager/training-form']\\\" class=\\\"material\\\">\\n        Add Seminar/Training\\n      </button>\\n\\n      <br>\\n      <br>\\n      <mat-divider></mat-divider>\\n      <mat-accordion>\\n        <mat-expansion-panel  class=\\\"example-container\\\" #matExpansionPanel>\\n          <mat-expansion-panel-header>\\n            <mat-panel-title>\\n            </mat-panel-title>\\n            <mat-panel-description style=\\\"font-family: cursive\\\">\\n                Search Options\\n              </mat-panel-description>\\n          </mat-expansion-panel-header>\\n          <div class=\\\"example-container material\\\">\\n            <mat-form-field hintLabel=\\\"characters\\\" style=\\\"font-family: cursive\\\">\\n              <input matInput placeholder=\\\"title\\\" [(ngModel)]=\\\"trainingQuery.title\\\" style=\\\"font-family: cursive\\\">\\n            </mat-form-field>\\n          </div>\\n          <br>\\n          <mat-action-row>\\n            <button mat-raised-button color=\\\"primary\\\" (click)=\\\"search(matExpansionPanel, paginator)\\\">Search</button>\\n            <button mat-raised-button color=\\\"primary\\\" (click)=\\\"reset(matExpansionPanel, paginator)\\\">Reset</button>\\n        </mat-action-row>\\n        </mat-expansion-panel>\\n      </mat-accordion>\\n      <br>\\n      <mat-divider></mat-divider>\\n      <div class=\\\"material\\\">\\n        <mat-table #table [dataSource]=\\\"dataSource\\\">\\n          <!-- Name Column -->\\n          <ng-container matColumnDef=\\\"ID\\\">\\n            <mat-header-cell *matHeaderCellDef>ID </mat-header-cell>\\n              <mat-cell *matCellDef=\\\"let training\\\" class=\\\"material\\\"> {{ training.sourceMemo.name }}: {{ training.year }} - {{ training.number }}</mat-cell>\\n          </ng-container>\\n\\n          <ng-container matColumnDef=\\\"Title\\\">\\n            <mat-header-cell *matHeaderCellDef class=\\\"material\\\"> Title </mat-header-cell>\\n            <mat-cell *matCellDef=\\\"let training\\\" class=\\\"material\\\"> \\n                <a mat-line [routerLink]=\\\"['/quonmanager/participant-form', training.id]\\\"> {{ training.title }} </a>   \\n            </mat-cell>\\n          </ng-container>\\n\\n          <ng-container matColumnDef=\\\"Edit\\\">\\n            <mat-header-cell *matHeaderCellDef class=\\\"material\\\"> Edit </mat-header-cell>\\n            <mat-cell *matCellDef=\\\"let training\\\">\\n                <a mat-button [routerLink]=\\\"['/quonmanager/training-form', training.id]\\\"><mat-icon color=\\\"primary\\\">edit</mat-icon> </a> \\n            </mat-cell>\\n          </ng-container>\\n  \\n          <ng-container matColumnDef=\\\"Delete\\\">\\n            <mat-header-cell *matHeaderCellDef class=\\\"material\\\"> Delete </mat-header-cell>\\n            <mat-cell *matCellDef=\\\"let training\\\"> \\n              <a mat-button (click)=\\\"DeleteTraining(training.id)\\\"> <mat-icon color=\\\"warn\\\">delete </mat-icon> </a>\\n            </mat-cell>\\n          </ng-container>\\n\\n          <mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\" class=\\\"material\\\"></mat-header-row>\\n          <mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\" class=\\\"material\\\"></mat-row>\\n\\n        </mat-table>\\n\\n        <mat-paginator #paginator [length]=\\\"trainingQuery.length\\\" [pageSize]=\\\"trainingQuery.pageSize\\\" [pageSizeOptions]=\\\"pageSizeOptions\\\" [pageIndex]=\\\"pageIndex\\\" (page)=\\\"pageEvent = $event; onPaginateChange($event)\\\"\\n          class=\\\"material\\\">\\n        </mat-paginator>\\n\\n      </div>\\n\\n    </div>\\n\\n    <ng-template #loading>\\n      <mat-progress-spinner style=\\\"margin:0 auto;\\\" [mode]=\\\"behavior\\\"></mat-progress-spinner>\\n    </ng-template>\\n  </mat-card>\\n</div>\\n\"","module.exports = \".example-container {\\n  display: flex;\\n  flex-direction: column;\\n  max-height: 500px;\\n  min-width: 300px; }\\n\\n.mat-table {\\n  overflow: auto;\\n  max-height: 500px; }\\n\\n.mat-column-EmployeeNumber {\\n  flex: 0 0 20%; }\\n\\n.mat-column-Name {\\n  flex: 0 0 30%; }\\n\\n.mat-column-Delete {\\n  flex: 0 0 25%; }\\n\\n.mat-column-Edit {\\n  flex: 0 0 25%; }\\n\\n.material {\\n  font-family: cursive; }\\n\\n.material mat-paginator {\\n  font-style: italic; }\\n\\n.material mat-header-cell {\\n  font-weight: bold;\\n  font-size: medium;\\n  color: #3F51B5; }\\n\"","import { TrainingService } from './../../services/training.service';\nimport { MatTableDataSource, PageEvent, MatDialog, MatSnackBar, MatExpansionPanel, MatPaginator } from '@angular/material';\n\nimport { Component, OnInit } from '@angular/core';\n\nimport { TrainingQuery } from '../../models/trainingQuery';\nimport { Training } from '../../models/training';\nimport { AppError } from '../../../common/app-error';\nimport { NoConnectionError } from '../../../common/no-connection-error';\n\n@Component({\n  selector: 'app-training-list',\n  templateUrl: './training-list.component.html',\n  styleUrls: ['./training-list.component.scss']\n})\nexport class TrainingListComponent implements OnInit {\n\n  trainingQuery: TrainingQuery = new TrainingQuery();\n  \n  training: Training;\n  trainings: Training[];\n\n  displayedColumns = ['ID', 'Title', 'Edit', 'Delete'];\n  dataSource: MatTableDataSource<Training>;\n  pageSizeOptions = [5, 10, 25, 50, 100];\n\n  pageEvent: PageEvent;\n\n  pageIndex = 0;\n  pageSize = 10;\n  \n  behavior = 'indeterminate';\n  \n  constructor(private trainingService: TrainingService,\n    private dialog: MatDialog,\n    private snackBar: MatSnackBar) { }\n\n  ngOnInit() {\n    this.trainingQuery.pageIndex = this.pageIndex + 1;\n    this.trainingQuery.pageSize = this.pageSize;\n    this.loadRecords(this.trainingQuery);\n  }\n\n  loadRecords(trainingQuery): void {\n    this.trainingService.all(trainingQuery)\n      .subscribe(response => {\n        this.trainings = response.json().trainings;\n        this.dataSource = new MatTableDataSource<Training>(this.trainings);\n        this.trainingQuery.length = response.json().count;\n      },\n        (error: AppError) => {\n          if (error instanceof NoConnectionError) {\n            this.snackBar.open('Loading Failed', 'No Connection', {\n              duration: 2000,\n            }\n            );\n            this.behavior = 'determinate';\n          }\n        });   \n  }\n\n  \n  onPaginateChange($event) {\n    this.pageSize = this.pageEvent.pageSize;\n    this.pageIndex = this.pageEvent.pageIndex;\n    this.ngOnInit();\n  }\n\n\n  search(matExpansionPanel: MatExpansionPanel, paginator: MatPaginator): void {\n    this.onFilterChange(matExpansionPanel, paginator);\n  }  \n\n  reset(matExpansionPanel: MatExpansionPanel, paginator: MatPaginator): void {\n    this.trainingQuery = new TrainingQuery();\n    this.onFilterChange(matExpansionPanel, paginator);\n  }\n\n  onFilterChange(matExpansionPanel: MatExpansionPanel, paginator: MatPaginator): void {\n    matExpansionPanel.close();\n    this.trainingQuery.pageIndex = 1;\n    this.trainingQuery.pageSize = this.pageSize;\n    this.loadRecords(this.trainingQuery);\n    paginator.pageIndex = 0;\n  }\n\n\n  DeleteTraining(id): void { \n    this.trainingService.delete(id)\n      .subscribe(response => {\n        this.snackBar.open('Training Deleted', 'Successful', {\n          duration: 2000, });\n          this.ngOnInit();\n      }, \n      (error: AppError) => {\n        if (error instanceof NoConnectionError) {\n          this.snackBar.open('Training not Deleted', 'Failed', {\n            duration: 2000,\n          }\n          );\n        }\n      });\n  }\n\n}\n","export class EmployeeQuery {\r\n    employeeNumber: string;\r\n    title: string;\r\n    firstName: string;\r\n    middleName: string;\r\n    lastName: string;\r\n    suffixName: string;\r\n    pageIndex: number;\r\n    pageSize: number;\r\n    length: number;\r\n}\r\n","export class Position {\r\n    Id: number;\r\n    Name: string;\r\n    StartDate: Date;\r\n    EndDate: Date;\r\n}\r\n","export class Station {\r\n    Id: Number;\r\n    Name: String;\r\n    StationNumber: Number;\r\n    SchoolId: Number;\r\n    StartDate: Date;\r\n    EndDate: Date;\r\n}\r\n","import { EmployeePosition } from './employeeposition';\r\nimport { Person } from './person';\r\nimport { EmployeeStation } from './employeestation';\r\n\r\nexport class Employee {\r\n    id: number;\r\n    employeeNumber: string;\r\n    personId: number;\r\n    entryDate: Date;\r\n    \r\n    person: Person;\r\n    employeePositions: EmployeePosition[];\r\n    employeeStations: EmployeeStation[];\r\n}\r\n","import { Person } from \"./person\";\r\nimport { Relation } from \"./Relation\";\r\nimport { Student } from \"./student\";\r\n\r\nexport class Guardian {\r\n    Id: number;\r\n    PersonId: number; \r\n    RelationId: number;\r\n    StudentId: number;\r\n    Contact: string;\r\n    \r\n    Person: Person;\r\n    Relation: Relation;\r\n    Student: Student;\r\n}","import { SectionAdviser } from './sectionAdviser';\r\nimport { Section } from './section';\r\nimport { Level } from './level';\r\n\r\nexport class LevelSection {\r\n    id: number;\r\n    schoolYear: number;\r\n    levelId: number;\r\n    sectionId: number;\r\n    stationId: number;\r\n    \r\n    level: Level;\r\n    section: Section;\r\n    sectionAdviser: SectionAdviser;\r\n    \r\n}\r\n","export class Participant {\r\n    id: number;\r\n    trainingVenueId: number;\r\n    employeeId: number;\r\n}","export class ParticipantQuery { \r\n    trainingVenueId: number;\r\n}\r\n","import { BloodType } from './bloodType';\r\nimport { MotherTongue } from './motherTongue';\r\nimport { CitizenShip } from './citizenShip';\r\nimport { CivilStatus } from './civilStatus';\r\nimport { Gender } from './gender';\r\nimport { Religion } from './religion';\r\n\r\nexport class Person {\r\n    id: number;\r\n    title: string;\r\n    firstName: string;\r\n    middleName: string;\r\n    lastName: string;\r\n    suffixName: string;\r\n    birthDate: Date;\r\n    placeOfBirth: string;\r\n    genderId: number;\r\n    civilStatusId: number;\r\n    citizenShipId: number;\r\n    motherTongueId: number;\r\n    bloodTypeId: number;\r\n    religionId: number;\r\n    height: number;\r\n    weight: number;\r\n    entryDate: Date;\r\n\r\n    gender: Gender;\r\n    civilStatus: CivilStatus;\r\n    citizenShip: CitizenShip;\r\n    motherTongue: MotherTongue;\r\n    bloodType: BloodType;\r\n    religion: Religion;\r\n}\r\n","export class Section {\r\n    Id: Number;\r\n    Name: String;\r\n}\r\n","import { Employee } from './employee';\r\nexport class SectionAdviser {\r\n    id: number;\r\n    adviserId: number;\r\n    employee: Employee;\r\n}\r\n","export class SourceMemo {\r\n    id: number;\r\n    name: string;\r\n}","import { Person } from \"./person\";\r\nimport { Gender } from \"./Gender\";\r\nimport { Guardian } from \"./guardian\";\r\nimport { OnInit } from \"@angular/core\";\r\nimport { StudentAddress } from \"./studentAddress\";\r\n\r\nexport class Student {\r\n    Id: number;\r\n    LrnNumber: string;\r\n    PersonId: number;\r\n    GenderId: number;\r\n    Contact: string;\r\n    BirthDate: Date;\r\n    // foreign key\r\n    Person : Person;\r\n    Gender: Gender;\r\n    // navigations property\r\n    StudentAddresses: StudentAddress[];\r\n    Guardian: Guardian;\r\n\r\n\r\n}","import { SourceMemo } from './sourceMemo';\r\nimport { TrainingVenue } from './trainingVenue';\r\nimport { TrainingSpeaker } from './trainingSpeaker';\r\nimport { TrainingDate } from './trainingDate';\r\n\r\nexport class Training {\r\n    id: number;\r\n    title: string;\r\n    sourceMemoId: number;\r\n    year: number;\r\n    number: number;\r\n    relativeExpenses: string;\r\n    entryDate: Date;\r\n\r\n    sourceMemo: SourceMemo;\r\n\r\n    trainingVenues: TrainingVenue[];\r\n    trainingSpeakers: TrainingSpeaker[];\r\n    trainingDates: TrainingDate[];\r\n}\r\n","export class TrainingQuery {\r\n    title: string;\r\n    year: number;\r\n    number: number;\r\n    \r\n    pageIndex: number;\r\n    pageSize: number;\r\n    length: number;\r\n}\r\n","import { Component, OnInit } from '@angular/core';\nimport { MatIconRegistry } from '@angular/material';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n@Component({\n  selector: 'app-quonmanager',\n  template: `\n    <app-sidenav> </app-sidenav>\n  `,\n  styles: []\n})\nexport class QuonmanagerAppComponent implements OnInit {\n\n  constructor(iconRegistry: MatIconRegistry, sanitizer: DomSanitizer) {\n    iconRegistry.addSvgIconSet(\n      sanitizer.bypassSecurityTrustResourceUrl('assets/avatars.svg'));\n   }\n\n  ngOnInit() {\n  }\n\n}\n","import { ParticipantService } from './services/participant.service';\nimport { TrainingService } from './services/training.service';\nimport { PageNotFoundComponent } from './components/page-not-found/page-not-found.component';\nimport { LevelSectionService } from './services/levelsection.service';\nimport { NgModule, Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Routes, RouterModule } from '@angular/router';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { MaterialModule } from '../../material.module';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { QuonmanagerAppComponent } from './quonmanager-app.component';\nimport { ToolbarComponent } from './components/toolbar/toolbar.component';\nimport { MainContentComponent } from './components/main-content/main-content.component';\nimport { SidenavComponent } from './components/sidenav/sidenav.component';\nimport { EmployeeListComponent } from './components/employee-list/employee-list.component';\nimport { EmployeeFormComponent } from './components/employee-form/employee-form.component';\nimport { PrincipalFormComponent } from './components/principal-form/principal-form.component';\nimport { PrincipalListComponent } from './components/principal-list/principal-list.component';\nimport { AdviserListComponent } from './components/adviser-list/adviser-list.component';\nimport { AdviserFormComponent } from './components/adviser-form/adviser-form.component';\nimport { PrefectofdisciplineFormComponent } from './components/prefectofdiscipline-form/prefectofdiscipline-form.component';\nimport { PrefectofdisciplineListComponent } from './components/prefectofdiscipline-list/prefectofdiscipline-list.component';\nimport { StudentListComponent } from './components/student-list/student-list.component';\nimport { StudentFormComponent } from './components/student-form/student-form.component';\nimport { GuidancecouncilorFormComponent } from './components/guidancecouncilor-form/guidancecouncilor-form.component';\nimport { GuidancecouncilorListComponent } from './components/guidancecouncilor-list/guidancecouncilor-list.component';\n\nimport { EmployeeService } from './services/employee.service';\nimport { PositionService } from './services/position.service';\nimport { StationService } from './services/station.service';\nimport { PrincipalService } from './services/principal.service';\nimport { EmployeeDetailsComponent } from './components/employee-details/employee-details.component';\nimport { EmployeePositionDetailsComponent } from './components/employee-position-details/employee-position-details.component';\nimport { EmployeeStationDetailsComponent } from './components/employee-station-details/employee-station-details.component';\nimport { RegistrationFormComponent } from './components/registration-form/registration-form.component';\nimport { LoginFormComponent } from './components/login-form/login-form.component';\nimport { RoleService } from './services/role.service';\nimport { NoAccessComponent } from './components/no-access/no-access.component';\nimport { UserService } from './services/user.service';\nimport { AuthService } from './services/auth.service';\nimport { AuthGuard } from './services/auth-guard.service';\nimport { StudentService } from './services/student.service';\nimport { BloodTypeService } from './services/bloodtype.service';\nimport { MotherTongueService } from './services/mothertongue.service';\nimport { CitizenShipService } from './services/citizenship.service';\nimport { CivilStatusService } from './services/civilstatus.service';\nimport { GenderService } from './services/gender.service';\nimport { ReligionService } from './services/religion.service';\n\nimport { HttpModule } from '@angular/http';\nimport { SectionListComponent } from './components/section-list/section-list.component';\nimport { SectionFormComponent } from './components/section-form/section-form.component';\nimport { SectionService } from './services/section.service';\nimport { LevelsectionListComponent } from './components/levelsection-list/levelsection-list.component';\nimport { LevelsectionFormComponent } from './components/levelsection-form/levelsection-form.component';\nimport { LevelService } from './services/level.service';\nimport { AdviserService } from './services/adviser.service';\nimport { DashboardComponent } from './components/dashboard/dashboard.component';\nimport { PositionListComponent } from './components/position-list/position-list.component';\nimport { PositionFormComponent } from './components/position-form/position-form.component';\nimport { StationFormComponent } from './components/station-form/station-form.component';\nimport { StationListComponent } from './components/station-list/station-list.component';\nimport { TrainingListComponent } from './components/training-list/training-list.component';\nimport { TrainingFormComponent } from './components/training-form/training-form.component';\nimport { ParticipantFormComponent } from './components/participant-form/participant-form.component';\n\n\n\nconst routes: Routes = [\n  { path: '', component: QuonmanagerAppComponent,\n    children: [ { path: 'dashboard', component: DashboardComponent, canActivate: [AuthGuard]},\n                { path: 'no-access', component: NoAccessComponent},\n                { path: 'employee-details/:id', component: EmployeeDetailsComponent, canActivate: [AuthGuard]},\n                { path: 'employee-list', component: EmployeeListComponent, canActivate: [AuthGuard] },\n                { path: 'employee-form/:id', component: EmployeeFormComponent, canActivate: [AuthGuard] },\n                { path: 'employee-form', component: EmployeeFormComponent, canActivate: [AuthGuard] },\n                { path: 'adviser-list', component: AdviserListComponent, canActivate: [AuthGuard]},\n                { path: 'section-list', component: SectionListComponent, canActivate: [AuthGuard]},\n                { path: 'section-form', component: SectionFormComponent, canActivate: [AuthGuard]},\n                { path: 'levelsection-list', component: LevelsectionListComponent, canActivate: [AuthGuard]},\n                { path: 'station-list', component: StationListComponent, canActivate: [AuthGuard]},\n                { path: 'position-list', component: PositionListComponent, canActivate: [AuthGuard]},\n                { path: 'student-list', component: StudentListComponent, canActivate: [AuthGuard]},\n                { path: 'student-form', component: StudentFormComponent, canActivate: [AuthGuard]},\n                { path: 'training-list', component: TrainingListComponent, canActivate: [AuthGuard]},\n                { path: 'training-form', component: TrainingFormComponent, canActivate: [AuthGuard]},\n                { path: 'training-form/:id', component: TrainingFormComponent, canActivate: [AuthGuard]},\n                { path: 'participant-form/:id', component: ParticipantFormComponent, canActivate: [AuthGuard] }\n              ]\n  },\n  { path: '**', component: PageNotFoundComponent }];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MaterialModule,\n    FlexLayoutModule,\n    FormsModule,\n    ReactiveFormsModule,\n    HttpClientModule,\n    HttpModule,\n    RouterModule.forChild(routes)\n  ],\n  providers: [\n    EmployeeService,\n    PositionService,\n    StationService,\n    PrincipalService,\n    UserService,\n    RoleService,\n    AuthService,\n    AuthGuard,\n    SectionService,\n    LevelSectionService,\n    LevelService,\n    AdviserService,\n    StudentService,\n    GenderService,\n    CivilStatusService,\n    CitizenShipService,\n    MotherTongueService,\n    BloodTypeService,\n    ReligionService,\n    TrainingService,\n    ParticipantService\n    \n  ],\n  declarations: [QuonmanagerAppComponent, ToolbarComponent, MainContentComponent, SidenavComponent, EmployeeListComponent, EmployeeFormComponent, PrincipalFormComponent, PrincipalListComponent, AdviserListComponent, AdviserFormComponent, PrefectofdisciplineFormComponent, PrefectofdisciplineListComponent, StudentListComponent, StudentFormComponent, GuidancecouncilorFormComponent, GuidancecouncilorListComponent, EmployeeDetailsComponent, EmployeePositionDetailsComponent, EmployeeStationDetailsComponent, RegistrationFormComponent, LoginFormComponent, NoAccessComponent, SectionListComponent, SectionFormComponent, LevelsectionListComponent, LevelsectionFormComponent, DashboardComponent, PositionListComponent, PositionFormComponent, StationFormComponent, StationListComponent, PageNotFoundComponent, TrainingListComponent, TrainingFormComponent, ParticipantFormComponent],\n  entryComponents: [\n    EmployeeFormComponent,\n    PrincipalFormComponent,\n    LoginFormComponent,\n    RegistrationFormComponent,\n    StationFormComponent,\n    PositionFormComponent,\n    StudentFormComponent,\n    LevelsectionFormComponent\n  ]\n})\nexport class QuonmanagerModule { }\n","import { Injectable } from '@angular/core';\nimport { DataService } from '../../services/data.service';\nimport { Http } from '@angular/http';\n\n@Injectable()\nexport class AdviserService extends DataService {\n\n  constructor(http: Http) {\n    super('http://jonelbucad21-001-site1.ftempurl.com/api/advisers', http);\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router, RouterStateSnapshot } from '@angular/router';\nimport { AuthService } from './auth.service';\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n\n  constructor(private authService: AuthService, private router: Router) { }\n\n  canActivate(route, state: RouterStateSnapshot) {\n    \n    if (this.authService.isLoggedIn()) return true;\n\n    this.router.navigate(['/quonmanager/no-access'], { queryParams: { returnUrl: state.url } });\n    return true;\n  }\n\n}\n","import { AuthHttp, tokenNotExpired, JwtHelper } from 'angular2-jwt';\nimport { DataService } from './../../services/data.service';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { BadRequestError } from '../../common/bad-request-error';\nimport { NotFoundError } from '../../common/not-found-error';\nimport { UnauthorizedError } from '../../common/unauthorized-error';\nimport { NoConnectionError } from '../../common/no-connection-error';\nimport { AppError } from '../../common/app-error';\nimport { Http } from '@angular/http';\n\n@Injectable()\nexport class AuthService {\n  response: any;\n  url = 'http://jonelbucad21-001-site1.ftempurl.com/api/users/login';\n  constructor(private http: Http) { }\n\n\n  login(resource) {\n    return this.http.post(this.url, resource)\n      .map(result => {\n        this.response = result;\n        localStorage.setItem('token', this.response.json().token);\n      })\n      .catch(this.handleError);\n  }\n\n  logout() {\n    localStorage.removeItem('token');\n  }\n\n  isLoggedIn() {\n    return tokenNotExpired();\n  }\n\n  get decodedToken() {\n    const token = localStorage.getItem('token');\n    \n    if (!token) return null;\n\n    return new JwtHelper().decodeToken(token);\n  }\n\n  private handleError(error: Response) {\n    if (error.status === 400) {\n      return Observable.throw(new BadRequestError(error));\n    }\n    if (error.status === 404) {\n      return Observable.throw(new NotFoundError(error));\n    }\n    if (error.status === 401) {\n      return Observable.throw(new UnauthorizedError(error));\n    }\n    if (error.status === 0) {\n      return Observable.throw(new NoConnectionError(error));\n    }\n    return Observable.throw(new AppError(error));\n\n  }\n\n}\n","import { DataService } from './../../services/data.service';\nimport { Injectable } from '@angular/core';\nimport { Http } from '@angular/http';\n\n@Injectable()\nexport class BloodTypeService extends DataService {\n\n  constructor(http: Http) {\n    super('http://jonelbucad21-001-site1.ftempurl.com/api/bloodtypes', http);\n  }\n}\n","import { DataService } from './../../services/data.service';\nimport { Injectable } from '@angular/core';\nimport { Http } from '@angular/http';\n\n@Injectable()\nexport class CitizenShipService extends DataService {\n\n  constructor(http: Http) {\n    super('http://jonelbucad21-001-site1.ftempurl.com/api/citizenships', http);\n  }\n}\n","import { DataService } from './../../services/data.service';\nimport { Injectable } from '@angular/core';\nimport { Http } from '@angular/http';\n\n@Injectable()\nexport class CivilStatusService extends DataService {\n\n  constructor(http: Http) {\n    super('http://jonelbucad21-001-site1.ftempurl.com/api/civilstatuses', http);\n  }\n}\n","import { DataService } from './../../services/data.service';\nimport { Injectable } from '@angular/core';\nimport { Http } from '@angular/http';\n\n@Injectable()\nexport class GenderService extends DataService {\n\n  constructor(http: Http) {\n    super('http://jonelbucad21-001-site1.ftempurl.com/api/genders', http);\n  }\n}\n","import { DataService } from './../../services/data.service';\r\nimport { Injectable } from '@angular/core';\r\nimport { Http } from '@angular/http';\r\n\r\n@Injectable()\r\nexport class LevelService extends DataService {\r\n\r\n  constructor(http: Http) {\r\n    super('http://jonelbucad21-001-site1.ftempurl.com/api/levels', http);\r\n  }\r\n}\r\n","import { DataService } from './../../services/data.service';\nimport { Injectable } from '@angular/core';\nimport { Http } from '@angular/http';\n\n@Injectable()\nexport class LevelSectionService extends DataService {\n\n\n  constructor(http: Http) {\n    super('http://jonelbucad21-001-site1.ftempurl.com/api/levelsections', http);\n  }\n\n}\n","import { DataService } from './../../services/data.service';\nimport { Injectable } from '@angular/core';\nimport { Http } from '@angular/http';\n\n@Injectable()\nexport class MotherTongueService extends DataService {\n\n  constructor(http: Http) {\n    super('http://jonelbucad21-001-site1.ftempurl.com/api/motherTongues', http);\n  }\n}\n","import { DataService } from './../../services/data.service';\nimport { Injectable } from '@angular/core';\nimport { Http } from '@angular/http';\n\n@Injectable()\nexport class ParticipantService extends DataService {\n\n  constructor(http: Http) {\n    super('http://depedpampanga-tmis.asia/api/participants', http);\n  }\n}\n","import { DataService } from './../../services/data.service';\nimport { Injectable } from '@angular/core';\nimport { Http } from '@angular/http';\n\n@Injectable()\nexport class PositionService extends DataService {\n\n  constructor(http: Http) {\n    super('http://jonelbucad21-001-site1.ftempurl.com/api/positions', http);\n  }\n}\n","import { AuthHttp } from 'angular2-jwt';\nimport { DataService } from './../../services/data.service';\nimport { Injectable } from '@angular/core';\nimport { Http } from '@angular/http';\n\n@Injectable()\nexport class PrincipalService extends DataService {\n\n  constructor(http: Http) {\n    super('http://jonelbucad21-001-site1.ftempurl.com/api/principals', http);\n  }\n\n}\n","import { DataService } from './../../services/data.service';\nimport { Injectable } from '@angular/core';\nimport { Http } from '@angular/http';\n\n@Injectable()\nexport class ReligionService extends DataService {\n\n  constructor(http: Http) {\n    super('http://jonelbucad21-001-site1.ftempurl.com/api/religions', http);\n  }\n}\n","import { DataService } from './../../services/data.service';\nimport { Injectable } from '@angular/core';\nimport { Http } from '@angular/http';\n\n@Injectable()\nexport class RoleService extends DataService {\n\n\n  constructor(http: Http) {\n    super('http://jonelbucad21-001-site1.ftempurl.com/api/roles', http);\n  }\n\n}\n","import { DataService } from './../../services/data.service';\nimport { Injectable } from '@angular/core';\nimport { Http } from '@angular/http';\n\n@Injectable()\nexport class SectionService extends DataService {\n\n\n  constructor(http: Http) {\n    super('http://jonelbucad21-001-site1.ftempurl.com/api/sections', http);\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { DataService } from '../../services/data.service';\nimport { Http } from '@angular/http';\n\n@Injectable()\nexport class StationService extends DataService {\n\n  constructor(http: Http) {\n    super('http://jonelbucad21-001-site1.ftempurl.com/api/stations', http);\n  }\n\n}\n","import { DataService } from './../../services/data.service';\nimport { Injectable } from '@angular/core';\nimport { Http } from '@angular/http';\n\n@Injectable()\nexport class StudentService extends DataService {\n\n\n  constructor(http: Http) {\n    super('http://jonelbucad21-001-site1.ftempurl.com/api/students', http);\n  }\n\n}\n","import { DataService } from './../../services/data.service';\nimport { Injectable } from '@angular/core';\nimport { Http } from '@angular/http';\n\n@Injectable()\nexport class TrainingService extends DataService {\n\n  sourceMemos: string;\n  speakers: string;\n  constructor(http: Http) {\n    super('http://jonelbucad21-001-site1.ftempurl.com/api/trainings', http);\n    this.sourceMemos = 'http://jonelbucad21-001-site1.ftempurl.com/api/trainings/sourceMemos';\n    this.speakers = 'http://jonelbucad21-001-site1.ftempurl.com/api/trainings/speakers';\n  }\n\n}\n","import { DataService } from './../../services/data.service';\nimport { Injectable } from '@angular/core';\nimport { Http } from '@angular/http';\n\n@Injectable()\nexport class UserService extends DataService {\n  urlForLogin: string;\n  constructor(http: Http) {\n    super('http://jonelbucad21-001-site1.ftempurl.com/api/users', http);\n    this.urlForLogin = 'http://jonelbucad21-001-site1.ftempurl.com/api/users/login';\n  }\n\n}\n"],"sourceRoot":""}
